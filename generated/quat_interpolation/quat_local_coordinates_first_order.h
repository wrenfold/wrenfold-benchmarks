// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

namespace sym {

/**
 * This function was autogenerated. Do not modify by hand.
 *
 * Args:
 *     q0_xyzw: Matrix41
 *     q1_xyzw: Matrix41
 *
 * Outputs:
 *     out: Matrix31
 *     D0: Matrix33
 *     D1: Matrix33
 */
template <typename Scalar>
void QuatLocalCoordinatesFirstOrder(const Eigen::Matrix<Scalar, 4, 1>& q0_xyzw,
                                    const Eigen::Matrix<Scalar, 4, 1>& q1_xyzw,
                                    Eigen::Matrix<Scalar, 3, 1>* const out = nullptr,
                                    Eigen::Matrix<Scalar, 3, 3>* const D0 = nullptr,
                                    Eigen::Matrix<Scalar, 3, 3>* const D1 = nullptr) {
  // Total ops: 197

  // Input arrays

  // Intermediate terms (73)
  const Scalar _tmp0 = q0_xyzw(2, 0) * q1_xyzw(1, 0);
  const Scalar _tmp1 = q0_xyzw(3, 0) * q1_xyzw(0, 0);
  const Scalar _tmp2 = q0_xyzw(0, 0) * q1_xyzw(3, 0);
  const Scalar _tmp3 = q0_xyzw(1, 0) * q1_xyzw(2, 0);
  const Scalar _tmp4 = _tmp0 + _tmp1 - _tmp2 - _tmp3;
  const Scalar _tmp5 = q0_xyzw(1, 0) * q1_xyzw(1, 0);
  const Scalar _tmp6 = q0_xyzw(0, 0) * q1_xyzw(0, 0);
  const Scalar _tmp7 = q0_xyzw(2, 0) * q1_xyzw(2, 0);
  const Scalar _tmp8 = -_tmp5 - _tmp6 - _tmp7;
  const Scalar _tmp9 = q0_xyzw(3, 0) * q1_xyzw(3, 0);
  const Scalar _tmp10 = std::min<Scalar>(Scalar(1.0), std::fabs(_tmp8 - _tmp9));
  const Scalar _tmp11 =
      2 * std::min<Scalar>(0, (((-_tmp8 + _tmp9) > 0) - ((-_tmp8 + _tmp9) < 0))) + 1;
  const Scalar _tmp12 = 2 * _tmp11;
  const Scalar _tmp13 =
      _tmp12 * std::acos(_tmp10) / std::sqrt(Scalar(1 - std::pow(_tmp10, Scalar(2))));
  const Scalar _tmp14 = q0_xyzw(3, 0) * q1_xyzw(1, 0);
  const Scalar _tmp15 = q0_xyzw(2, 0) * q1_xyzw(0, 0);
  const Scalar _tmp16 = q0_xyzw(1, 0) * q1_xyzw(3, 0);
  const Scalar _tmp17 = q0_xyzw(0, 0) * q1_xyzw(2, 0);
  const Scalar _tmp18 = _tmp14 - _tmp15 - _tmp16 + _tmp17;
  const Scalar _tmp19 = q0_xyzw(0, 0) * q1_xyzw(1, 0);
  const Scalar _tmp20 = q0_xyzw(1, 0) * q1_xyzw(0, 0);
  const Scalar _tmp21 = q0_xyzw(2, 0) * q1_xyzw(3, 0);
  const Scalar _tmp22 = q0_xyzw(3, 0) * q1_xyzw(2, 0);
  const Scalar _tmp23 = -_tmp19 + _tmp20 - _tmp21 + _tmp22;
  const Scalar _tmp24 = (Scalar(1) / Scalar(2)) * _tmp0;
  const Scalar _tmp25 = (Scalar(1) / Scalar(2)) * _tmp1;
  const Scalar _tmp26 = (Scalar(1) / Scalar(2)) * _tmp2;
  const Scalar _tmp27 = (Scalar(1) / Scalar(2)) * _tmp3;
  const Scalar _tmp28 = _tmp24 + _tmp25 - _tmp26 - _tmp27;
  const Scalar _tmp29 = _tmp5 + _tmp6 + _tmp7 + _tmp9;
  const Scalar _tmp30 = std::fabs(_tmp29);
  const Scalar _tmp31 = std::min<Scalar>(Scalar(1.0), _tmp30);
  const Scalar _tmp32 = 1 - std::pow(_tmp31, Scalar(2));
  const Scalar _tmp33 = _tmp11 *
                        ((((Scalar(1.0) - _tmp30) > 0) - ((Scalar(1.0) - _tmp30) < 0)) + 1) *
                        (((_tmp29) > 0) - ((_tmp29) < 0));
  const Scalar _tmp34 = _tmp33 / _tmp32;
  const Scalar _tmp35 = _tmp34 * _tmp4;
  const Scalar _tmp36 = std::acos(_tmp31);
  const Scalar _tmp37 = _tmp31 * _tmp33 / (_tmp32 * std::sqrt(_tmp32));
  const Scalar _tmp38 = _tmp36 * _tmp37;
  const Scalar _tmp39 = _tmp38 * _tmp4;
  const Scalar _tmp40 = (Scalar(1) / Scalar(2)) * _tmp5;
  const Scalar _tmp41 = (Scalar(1) / Scalar(2)) * _tmp6;
  const Scalar _tmp42 = (Scalar(1) / Scalar(2)) * _tmp9;
  const Scalar _tmp43 = (Scalar(1) / Scalar(2)) * _tmp7;
  const Scalar _tmp44 = _tmp12 / std::sqrt(_tmp32);
  const Scalar _tmp45 = _tmp36 * _tmp44;
  const Scalar _tmp46 = _tmp45 * (-_tmp40 - _tmp41 - _tmp42 - _tmp43);
  const Scalar _tmp47 = _tmp18 * _tmp34;
  const Scalar _tmp48 = (Scalar(1) / Scalar(2)) * _tmp19;
  const Scalar _tmp49 = (Scalar(1) / Scalar(2)) * _tmp20;
  const Scalar _tmp50 = (Scalar(1) / Scalar(2)) * _tmp21;
  const Scalar _tmp51 = (Scalar(1) / Scalar(2)) * _tmp22;
  const Scalar _tmp52 = -_tmp48 + _tmp49 - _tmp50 + _tmp51;
  const Scalar _tmp53 = _tmp45 * _tmp52;
  const Scalar _tmp54 = _tmp18 * _tmp38;
  const Scalar _tmp55 = (Scalar(1) / Scalar(2)) * _tmp14;
  const Scalar _tmp56 = (Scalar(1) / Scalar(2)) * _tmp15;
  const Scalar _tmp57 = (Scalar(1) / Scalar(2)) * _tmp16;
  const Scalar _tmp58 = (Scalar(1) / Scalar(2)) * _tmp17;
  const Scalar _tmp59 = -_tmp55 + _tmp56 + _tmp57 - _tmp58;
  const Scalar _tmp60 = _tmp36 * _tmp59;
  const Scalar _tmp61 = _tmp44 * _tmp60;
  const Scalar _tmp62 = _tmp23 * _tmp34;
  const Scalar _tmp63 = _tmp23 * _tmp38;
  const Scalar _tmp64 = _tmp55 - _tmp56 - _tmp57 + _tmp58;
  const Scalar _tmp65 = _tmp48 - _tmp49 + _tmp50 - _tmp51;
  const Scalar _tmp66 = _tmp45 * _tmp65;
  const Scalar _tmp67 = _tmp28 * _tmp45;
  const Scalar _tmp68 = _tmp45 * _tmp64;
  const Scalar _tmp69 = -_tmp24 - _tmp25 + _tmp26 + _tmp27;
  const Scalar _tmp70 = _tmp45 * _tmp69;
  const Scalar _tmp71 = _tmp45 * (_tmp40 + _tmp41 + _tmp42 + _tmp43);
  const Scalar _tmp72 = _tmp37 * _tmp60;

  // Output terms (3)
  if (out != nullptr) {
    Eigen::Matrix<Scalar, 3, 1>& _out = (*out);

    _out(0, 0) = _tmp13 * _tmp4;
    _out(1, 0) = _tmp13 * _tmp18;
    _out(2, 0) = _tmp13 * _tmp23;
  }

  if (D0 != nullptr) {
    Eigen::Matrix<Scalar, 3, 3>& _D0 = (*D0);

    _D0(0, 0) = -_tmp28 * _tmp35 + _tmp28 * _tmp39 + _tmp46;
    _D0(1, 0) = -_tmp28 * _tmp47 + _tmp28 * _tmp54 + _tmp53;
    _D0(2, 0) = -_tmp28 * _tmp62 + _tmp28 * _tmp63 + _tmp61;
    _D0(0, 1) = -_tmp35 * _tmp64 + _tmp39 * _tmp64 + _tmp66;
    _D0(1, 1) = _tmp46 - _tmp47 * _tmp64 + _tmp54 * _tmp64;
    _D0(2, 1) = -_tmp62 * _tmp64 + _tmp63 * _tmp64 + _tmp67;
    _D0(0, 2) = -_tmp35 * _tmp52 + _tmp39 * _tmp52 + _tmp68;
    _D0(1, 2) = -_tmp47 * _tmp52 + _tmp52 * _tmp54 + _tmp70;
    _D0(2, 2) = _tmp46 - _tmp52 * _tmp62 + _tmp52 * _tmp63;
  }

  if (D1 != nullptr) {
    Eigen::Matrix<Scalar, 3, 3>& _D1 = (*D1);

    _D1(0, 0) = -_tmp35 * _tmp69 + _tmp39 * _tmp69 + _tmp71;
    _D1(1, 0) = -_tmp47 * _tmp69 + _tmp53 + _tmp54 * _tmp69;
    _D1(2, 0) = _tmp61 - _tmp62 * _tmp69 + _tmp63 * _tmp69;
    _D1(0, 1) = -_tmp35 * _tmp59 + _tmp4 * _tmp72 + _tmp66;
    _D1(1, 1) = _tmp18 * _tmp72 - _tmp47 * _tmp59 + _tmp71;
    _D1(2, 1) = _tmp23 * _tmp72 - _tmp59 * _tmp62 + _tmp67;
    _D1(0, 2) = -_tmp35 * _tmp65 + _tmp39 * _tmp65 + _tmp68;
    _D1(1, 2) = -_tmp47 * _tmp65 + _tmp54 * _tmp65 + _tmp70;
    _D1(2, 2) = -_tmp62 * _tmp65 + _tmp63 * _tmp65 + _tmp71;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
