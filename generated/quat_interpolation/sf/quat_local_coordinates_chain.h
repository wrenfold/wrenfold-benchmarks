// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

namespace sym {

/**
 * This function was autogenerated. Do not modify by hand.
 *
 * Args:
 *     q0_xyzw: Matrix41
 *     q1_xyzw: Matrix41
 *
 * Outputs:
 *     out: Matrix31
 *     D0: Matrix33
 *     D1: Matrix33
 */
template <typename Scalar>
void QuatLocalCoordinatesChain(const Eigen::Matrix<Scalar, 4, 1>& q0_xyzw,
                               const Eigen::Matrix<Scalar, 4, 1>& q1_xyzw,
                               Eigen::Matrix<Scalar, 3, 1>* const out = nullptr,
                               Eigen::Matrix<Scalar, 3, 3>* const D0 = nullptr,
                               Eigen::Matrix<Scalar, 3, 3>* const D1 = nullptr) {
  // Total ops: 337

  // Input arrays

  // Intermediate terms (77)
  const Scalar _tmp0 = -q0_xyzw(0, 0) * q1_xyzw(3, 0) - q0_xyzw(1, 0) * q1_xyzw(2, 0) +
                       q0_xyzw(2, 0) * q1_xyzw(1, 0) + q0_xyzw(3, 0) * q1_xyzw(0, 0);
  const Scalar _tmp1 = q0_xyzw(1, 0) * q1_xyzw(1, 0);
  const Scalar _tmp2 = q0_xyzw(0, 0) * q1_xyzw(0, 0);
  const Scalar _tmp3 = q0_xyzw(2, 0) * q1_xyzw(2, 0);
  const Scalar _tmp4 = -_tmp1 - _tmp2 - _tmp3;
  const Scalar _tmp5 = q0_xyzw(3, 0) * q1_xyzw(3, 0);
  const Scalar _tmp6 = std::min<Scalar>(Scalar(1.0), std::fabs(_tmp4 - _tmp5));
  const Scalar _tmp7 =
      2 * std::min<Scalar>(0, (((-_tmp4 + _tmp5) > 0) - ((-_tmp4 + _tmp5) < 0))) + 1;
  const Scalar _tmp8 = 2 * _tmp7;
  const Scalar _tmp9 = _tmp8 * std::acos(_tmp6) / std::sqrt(Scalar(1 - std::pow(_tmp6, Scalar(2))));
  const Scalar _tmp10 = q0_xyzw(0, 0) * q1_xyzw(2, 0) - q0_xyzw(1, 0) * q1_xyzw(3, 0) -
                        q0_xyzw(2, 0) * q1_xyzw(0, 0) + q0_xyzw(3, 0) * q1_xyzw(1, 0);
  const Scalar _tmp11 = -q0_xyzw(0, 0) * q1_xyzw(1, 0) + q0_xyzw(1, 0) * q1_xyzw(0, 0) -
                        q0_xyzw(2, 0) * q1_xyzw(3, 0) + q0_xyzw(3, 0) * q1_xyzw(2, 0);
  const Scalar _tmp12 = _tmp1 + _tmp2 + _tmp3 + _tmp5;
  const Scalar _tmp13 = std::fabs(_tmp12);
  const Scalar _tmp14 = std::min<Scalar>(Scalar(1.0), _tmp13);
  const Scalar _tmp15 = std::acos(_tmp14);
  const Scalar _tmp16 = 1 - std::pow(_tmp14, Scalar(2));
  const Scalar _tmp17 = _tmp8 / std::sqrt(_tmp16);
  const Scalar _tmp18 = _tmp15 * _tmp17;
  const Scalar _tmp19 = _tmp18 * q1_xyzw(0, 0);
  const Scalar _tmp20 = _tmp7 *
                        ((((Scalar(1.0) - _tmp13) > 0) - ((Scalar(1.0) - _tmp13) < 0)) + 1) *
                        (((_tmp12) > 0) - ((_tmp12) < 0));
  const Scalar _tmp21 = _tmp20 / _tmp16;
  const Scalar _tmp22 = _tmp0 * _tmp21;
  const Scalar _tmp23 = _tmp15 * q1_xyzw(3, 0);
  const Scalar _tmp24 = _tmp14 * _tmp20 / (_tmp16 * std::sqrt(_tmp16));
  const Scalar _tmp25 = _tmp23 * _tmp24;
  const Scalar _tmp26 = _tmp0 * _tmp25 + _tmp19 - _tmp22 * q1_xyzw(3, 0);
  const Scalar _tmp27 = (Scalar(1) / Scalar(2)) * q0_xyzw(0, 0);
  const Scalar _tmp28 = -_tmp17 * _tmp23;
  const Scalar _tmp29 = _tmp15 * _tmp24;
  const Scalar _tmp30 = _tmp0 * _tmp29;
  const Scalar _tmp31 = -_tmp22 * q1_xyzw(0, 0) + _tmp28 + _tmp30 * q1_xyzw(0, 0);
  const Scalar _tmp32 = (Scalar(1) / Scalar(2)) * q0_xyzw(3, 0);
  const Scalar _tmp33 = _tmp18 * q1_xyzw(1, 0);
  const Scalar _tmp34 = -_tmp22 * q1_xyzw(2, 0) + _tmp30 * q1_xyzw(2, 0) + _tmp33;
  const Scalar _tmp35 = (Scalar(1) / Scalar(2)) * q0_xyzw(1, 0);
  const Scalar _tmp36 = _tmp18 * q1_xyzw(2, 0);
  const Scalar _tmp37 = -_tmp22 * q1_xyzw(1, 0) + _tmp30 * q1_xyzw(1, 0) - _tmp36;
  const Scalar _tmp38 = (Scalar(1) / Scalar(2)) * q0_xyzw(2, 0);
  const Scalar _tmp39 = _tmp10 * _tmp29;
  const Scalar _tmp40 = _tmp10 * _tmp21;
  const Scalar _tmp41 = _tmp28 + _tmp39 * q1_xyzw(1, 0) - _tmp40 * q1_xyzw(1, 0);
  const Scalar _tmp42 = _tmp36 + _tmp39 * q1_xyzw(0, 0) - _tmp40 * q1_xyzw(0, 0);
  const Scalar _tmp43 = _tmp10 * _tmp25 + _tmp33 - _tmp40 * q1_xyzw(3, 0);
  const Scalar _tmp44 = -_tmp19 + _tmp39 * q1_xyzw(2, 0) - _tmp40 * q1_xyzw(2, 0);
  const Scalar _tmp45 = _tmp11 * _tmp21;
  const Scalar _tmp46 = _tmp11 * _tmp29;
  const Scalar _tmp47 = _tmp28 - _tmp45 * q1_xyzw(2, 0) + _tmp46 * q1_xyzw(2, 0);
  const Scalar _tmp48 = _tmp19 - _tmp45 * q1_xyzw(1, 0) + _tmp46 * q1_xyzw(1, 0);
  const Scalar _tmp49 = -_tmp33 - _tmp45 * q1_xyzw(0, 0) + _tmp46 * q1_xyzw(0, 0);
  const Scalar _tmp50 = _tmp11 * _tmp25 + _tmp36 - _tmp45 * q1_xyzw(3, 0);
  const Scalar _tmp51 = _tmp18 * q0_xyzw(3, 0);
  const Scalar _tmp52 = -Scalar(1) / Scalar(2) * _tmp22 * q0_xyzw(0, 0) +
                        (Scalar(1) / Scalar(2)) * _tmp30 * q0_xyzw(0, 0) +
                        (Scalar(1) / Scalar(2)) * _tmp51;
  const Scalar _tmp53 = _tmp18 * q0_xyzw(0, 0);
  const Scalar _tmp54 = -_tmp53;
  const Scalar _tmp55 = -Scalar(1) / Scalar(2) * _tmp22 * q0_xyzw(3, 0) +
                        (Scalar(1) / Scalar(2)) * _tmp30 * q0_xyzw(3, 0) +
                        (Scalar(1) / Scalar(2)) * _tmp54;
  const Scalar _tmp56 = _tmp18 * q0_xyzw(1, 0);
  const Scalar _tmp57 = -_tmp56;
  const Scalar _tmp58 = -Scalar(1) / Scalar(2) * _tmp22 * q0_xyzw(2, 0) +
                        (Scalar(1) / Scalar(2)) * _tmp30 * q0_xyzw(2, 0) +
                        (Scalar(1) / Scalar(2)) * _tmp57;
  const Scalar _tmp59 = _tmp18 * q0_xyzw(2, 0);
  const Scalar _tmp60 = -Scalar(1) / Scalar(2) * _tmp22 * q0_xyzw(1, 0) +
                        (Scalar(1) / Scalar(2)) * _tmp30 * q0_xyzw(1, 0) +
                        (Scalar(1) / Scalar(2)) * _tmp59;
  const Scalar _tmp61 = _tmp39 * q0_xyzw(3, 0) - _tmp40 * q0_xyzw(3, 0) + _tmp57;
  const Scalar _tmp62 = -_tmp59;
  const Scalar _tmp63 = _tmp39 * q0_xyzw(0, 0) - _tmp40 * q0_xyzw(0, 0) + _tmp62;
  const Scalar _tmp64 = (Scalar(1) / Scalar(2)) * q1_xyzw(3, 0);
  const Scalar _tmp65 = _tmp39 * q0_xyzw(1, 0) - _tmp40 * q0_xyzw(1, 0) + _tmp51;
  const Scalar _tmp66 = (Scalar(1) / Scalar(2)) * q1_xyzw(2, 0);
  const Scalar _tmp67 = _tmp39 * q0_xyzw(2, 0) - _tmp40 * q0_xyzw(2, 0) + _tmp53;
  const Scalar _tmp68 = (Scalar(1) / Scalar(2)) * q1_xyzw(1, 0);
  const Scalar _tmp69 = -_tmp45 * q0_xyzw(0, 0) + _tmp46 * q0_xyzw(0, 0) + _tmp56;
  const Scalar _tmp70 = -_tmp45 * q0_xyzw(3, 0) + _tmp46 * q0_xyzw(3, 0) + _tmp62;
  const Scalar _tmp71 = (Scalar(1) / Scalar(2)) * _tmp70;
  const Scalar _tmp72 = -Scalar(1) / Scalar(2) * _tmp45 * q0_xyzw(2, 0) +
                        (Scalar(1) / Scalar(2)) * _tmp46 * q0_xyzw(2, 0) +
                        (Scalar(1) / Scalar(2)) * _tmp51;
  const Scalar _tmp73 = -_tmp45 * q0_xyzw(1, 0) + _tmp46 * q0_xyzw(1, 0) + _tmp54;
  const Scalar _tmp74 = (Scalar(1) / Scalar(2)) * _tmp65;
  const Scalar _tmp75 = (Scalar(1) / Scalar(2)) * _tmp67;
  const Scalar _tmp76 = (Scalar(1) / Scalar(2)) * _tmp73;

  // Output terms (3)
  if (out != nullptr) {
    Eigen::Matrix<Scalar, 3, 1>& _out = (*out);

    _out(0, 0) = _tmp0 * _tmp9;
    _out(1, 0) = _tmp10 * _tmp9;
    _out(2, 0) = _tmp11 * _tmp9;
  }

  if (D0 != nullptr) {
    Eigen::Matrix<Scalar, 3, 3>& _D0 = (*D0);

    _D0(0, 0) = -_tmp26 * _tmp27 + _tmp31 * _tmp32 - _tmp34 * _tmp35 + _tmp37 * _tmp38;
    _D0(1, 0) = -_tmp27 * _tmp43 + _tmp32 * _tmp42 - _tmp35 * _tmp44 + _tmp38 * _tmp41;
    _D0(2, 0) = -_tmp27 * _tmp50 + _tmp32 * _tmp49 - _tmp35 * _tmp47 + _tmp38 * _tmp48;
    _D0(0, 1) = -_tmp26 * _tmp35 + _tmp27 * _tmp34 - _tmp31 * _tmp38 + _tmp32 * _tmp37;
    _D0(1, 1) = _tmp27 * _tmp44 + _tmp32 * _tmp41 - _tmp35 * _tmp43 - _tmp38 * _tmp42;
    _D0(2, 1) = _tmp27 * _tmp47 + _tmp32 * _tmp48 - _tmp35 * _tmp50 - _tmp38 * _tmp49;
    _D0(0, 2) = -_tmp26 * _tmp38 - _tmp27 * _tmp37 + _tmp31 * _tmp35 + _tmp32 * _tmp34;
    _D0(1, 2) = -_tmp27 * _tmp41 + _tmp32 * _tmp44 + _tmp35 * _tmp42 - _tmp38 * _tmp43;
    _D0(2, 2) = -_tmp27 * _tmp48 + _tmp32 * _tmp47 + _tmp35 * _tmp49 - _tmp38 * _tmp50;
  }

  if (D1 != nullptr) {
    Eigen::Matrix<Scalar, 3, 3>& _D1 = (*D1);

    _D1(0, 0) = _tmp52 * q1_xyzw(3, 0) - _tmp55 * q1_xyzw(0, 0) - _tmp58 * q1_xyzw(1, 0) +
                _tmp60 * q1_xyzw(2, 0);
    _D1(1, 0) = -Scalar(1) / Scalar(2) * _tmp61 * q1_xyzw(0, 0) + _tmp63 * _tmp64 +
                _tmp65 * _tmp66 - _tmp67 * _tmp68;
    _D1(2, 0) = _tmp64 * _tmp69 + _tmp66 * _tmp73 - _tmp71 * q1_xyzw(0, 0) - _tmp72 * q1_xyzw(1, 0);
    _D1(0, 1) = -_tmp52 * q1_xyzw(2, 0) - _tmp55 * q1_xyzw(1, 0) + _tmp58 * q1_xyzw(0, 0) +
                _tmp60 * q1_xyzw(3, 0);
    _D1(1, 1) =
        -_tmp61 * _tmp68 - _tmp63 * _tmp66 + _tmp74 * q1_xyzw(3, 0) + _tmp75 * q1_xyzw(0, 0);
    _D1(2, 1) =
        -_tmp66 * _tmp69 - _tmp71 * q1_xyzw(1, 0) + _tmp72 * q1_xyzw(0, 0) + _tmp76 * q1_xyzw(3, 0);
    _D1(0, 2) = _tmp52 * q1_xyzw(1, 0) - _tmp55 * q1_xyzw(2, 0) + _tmp58 * q1_xyzw(3, 0) -
                _tmp60 * q1_xyzw(0, 0);
    _D1(1, 2) =
        -_tmp61 * _tmp66 + _tmp63 * _tmp68 - _tmp74 * q1_xyzw(0, 0) + _tmp75 * q1_xyzw(3, 0);
    _D1(2, 2) =
        -_tmp66 * _tmp70 + _tmp68 * _tmp69 + _tmp72 * q1_xyzw(3, 0) - _tmp76 * q1_xyzw(0, 0);
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
