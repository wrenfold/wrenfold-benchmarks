// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

namespace sym {

/**
 * This function was autogenerated. Do not modify by hand.
 *
 * Args:
 *     i_R_j_xyzw: Matrix41
 *     i_p_j: Matrix31
 *     i_v_j: Matrix31
 *     gyro_bias: Matrix31
 *     accelerometer_bias: Matrix31
 *     angular_velocity: Matrix31
 *     linear_acceleration: Matrix31
 *     dt: Scalar
 *
 * Outputs:
 *     i_R_k: Matrix41
 *     i_p_k: Matrix31
 *     i_v_k: Matrix31
 *     k_D_j: Matrix99
 *     k_D_measurements: Matrix96
 *     k_D_bias: Matrix96
 */
template <typename Scalar>
void IntegrateImuChain(const Eigen::Matrix<Scalar, 4, 1>& i_R_j_xyzw,
                       const Eigen::Matrix<Scalar, 3, 1>& i_p_j,
                       const Eigen::Matrix<Scalar, 3, 1>& i_v_j,
                       const Eigen::Matrix<Scalar, 3, 1>& gyro_bias,
                       const Eigen::Matrix<Scalar, 3, 1>& accelerometer_bias,
                       const Eigen::Matrix<Scalar, 3, 1>& angular_velocity,
                       const Eigen::Matrix<Scalar, 3, 1>& linear_acceleration, const Scalar dt,
                       Eigen::Matrix<Scalar, 4, 1>* const i_R_k = nullptr,
                       Eigen::Matrix<Scalar, 3, 1>* const i_p_k = nullptr,
                       Eigen::Matrix<Scalar, 3, 1>* const i_v_k = nullptr,
                       Eigen::Matrix<Scalar, 9, 9>* const k_D_j = nullptr,
                       Eigen::Matrix<Scalar, 9, 6>* const k_D_measurements = nullptr,
                       Eigen::Matrix<Scalar, 9, 6>* const k_D_bias = nullptr) {
  // Total ops: 728

  // Input arrays

  // Intermediate terms (251)
  const Scalar _tmp0 = std::pow(dt, Scalar(2));
  const Scalar _tmp1 = angular_velocity(0, 0) - gyro_bias(0, 0);
  const Scalar _tmp2 = std::pow(_tmp1, Scalar(2));
  const Scalar _tmp3 = angular_velocity(1, 0) - gyro_bias(1, 0);
  const Scalar _tmp4 = std::pow(_tmp3, Scalar(2));
  const Scalar _tmp5 = angular_velocity(2, 0) - gyro_bias(2, 0);
  const Scalar _tmp6 = std::pow(_tmp5, Scalar(2));
  const Scalar _tmp7 =
      _tmp0 * _tmp2 + _tmp0 * _tmp4 + _tmp0 * _tmp6 + Scalar(1.0000000000000001e-32);
  const Scalar _tmp8 = std::sqrt(_tmp7);
  const Scalar _tmp9 = (Scalar(1) / Scalar(2)) * _tmp8;
  const Scalar _tmp10 = std::cos(_tmp9);
  const Scalar _tmp11 = _tmp10 * i_R_j_xyzw(0, 0);
  const Scalar _tmp12 = std::sin(_tmp9);
  const Scalar _tmp13 = _tmp12 * i_R_j_xyzw(1, 0);
  const Scalar _tmp14 = Scalar(1.0) / (_tmp8);
  const Scalar _tmp15 = _tmp14 * dt;
  const Scalar _tmp16 = _tmp13 * _tmp15;
  const Scalar _tmp17 = _tmp12 * _tmp15;
  const Scalar _tmp18 = _tmp17 * i_R_j_xyzw(2, 0);
  const Scalar _tmp19 = _tmp17 * i_R_j_xyzw(3, 0);
  const Scalar _tmp20 = _tmp1 * _tmp19 + _tmp11 + _tmp16 * _tmp5 - _tmp18 * _tmp3;
  const Scalar _tmp21 = _tmp10 * i_R_j_xyzw(1, 0);
  const Scalar _tmp22 = _tmp17 * i_R_j_xyzw(0, 0);
  const Scalar _tmp23 = _tmp1 * _tmp18 + _tmp19 * _tmp3 + _tmp21 - _tmp22 * _tmp5;
  const Scalar _tmp24 = _tmp10 * i_R_j_xyzw(2, 0);
  const Scalar _tmp25 = -_tmp1 * _tmp16 + _tmp19 * _tmp5 + _tmp22 * _tmp3 + _tmp24;
  const Scalar _tmp26 = _tmp10 * i_R_j_xyzw(3, 0);
  const Scalar _tmp27 = -_tmp1 * _tmp22 - _tmp16 * _tmp3 - _tmp18 * _tmp5 + _tmp26;
  const Scalar _tmp28 = -2 * std::pow(i_R_j_xyzw(1, 0), Scalar(2));
  const Scalar _tmp29 = -2 * std::pow(i_R_j_xyzw(2, 0), Scalar(2));
  const Scalar _tmp30 = _tmp28 + _tmp29 + 1;
  const Scalar _tmp31 = -accelerometer_bias(0, 0) + linear_acceleration(0, 0);
  const Scalar _tmp32 = 2 * i_R_j_xyzw(1, 0);
  const Scalar _tmp33 = _tmp32 * i_R_j_xyzw(3, 0);
  const Scalar _tmp34 = 2 * i_R_j_xyzw(2, 0);
  const Scalar _tmp35 = _tmp34 * i_R_j_xyzw(0, 0);
  const Scalar _tmp36 = _tmp33 + _tmp35;
  const Scalar _tmp37 = -accelerometer_bias(2, 0) + linear_acceleration(2, 0);
  const Scalar _tmp38 = _tmp34 * i_R_j_xyzw(3, 0);
  const Scalar _tmp39 = _tmp32 * i_R_j_xyzw(0, 0);
  const Scalar _tmp40 = -_tmp38 + _tmp39;
  const Scalar _tmp41 = -accelerometer_bias(1, 0) + linear_acceleration(1, 0);
  const Scalar _tmp42 = dt * (_tmp30 * _tmp31 + _tmp36 * _tmp37 + _tmp40 * _tmp41);
  const Scalar _tmp43 = std::fabs(dt);
  const Scalar _tmp44 = (Scalar(1) / Scalar(2)) * _tmp43;
  const Scalar _tmp45 = 1 - 2 * std::pow(i_R_j_xyzw(0, 0), Scalar(2));
  const Scalar _tmp46 = _tmp29 + _tmp45;
  const Scalar _tmp47 = 2 * i_R_j_xyzw(0, 0) * i_R_j_xyzw(3, 0);
  const Scalar _tmp48 = _tmp32 * i_R_j_xyzw(2, 0);
  const Scalar _tmp49 = -_tmp47 + _tmp48;
  const Scalar _tmp50 = _tmp38 + _tmp39;
  const Scalar _tmp51 = dt * (_tmp31 * _tmp50 + _tmp37 * _tmp49 + _tmp41 * _tmp46);
  const Scalar _tmp52 = _tmp28 + _tmp45;
  const Scalar _tmp53 = -_tmp33 + _tmp35;
  const Scalar _tmp54 = _tmp47 + _tmp48;
  const Scalar _tmp55 = dt * (_tmp31 * _tmp53 + _tmp37 * _tmp52 + _tmp41 * _tmp54);
  const Scalar _tmp56 = (Scalar(1) / Scalar(2)) * _tmp26;
  const Scalar _tmp57 = _tmp12 * i_R_j_xyzw(2, 0);
  const Scalar _tmp58 = _tmp14 * _tmp57;
  const Scalar _tmp59 = (Scalar(1) / Scalar(2)) * dt;
  const Scalar _tmp60 = _tmp5 * _tmp59;
  const Scalar _tmp61 = _tmp58 * _tmp60;
  const Scalar _tmp62 = _tmp3 * _tmp59;
  const Scalar _tmp63 = _tmp14 * _tmp62;
  const Scalar _tmp64 = _tmp13 * _tmp63;
  const Scalar _tmp65 = _tmp59 * i_R_j_xyzw(0, 0);
  const Scalar _tmp66 = _tmp12 * _tmp14 * _tmp65;
  const Scalar _tmp67 = _tmp1 * _tmp66;
  const Scalar _tmp68 = _tmp56 + _tmp61 + _tmp64 - _tmp67;
  const Scalar _tmp69 = 2 * _tmp27;
  const Scalar _tmp70 = (Scalar(1) / Scalar(2)) * _tmp11;
  const Scalar _tmp71 = -_tmp70;
  const Scalar _tmp72 = _tmp14 * _tmp60;
  const Scalar _tmp73 = _tmp13 * _tmp72;
  const Scalar _tmp74 = -_tmp58 * _tmp62;
  const Scalar _tmp75 = _tmp12 * i_R_j_xyzw(3, 0);
  const Scalar _tmp76 = _tmp1 * _tmp75;
  const Scalar _tmp77 = _tmp14 * _tmp59;
  const Scalar _tmp78 = _tmp76 * _tmp77;
  const Scalar _tmp79 = -_tmp78;
  const Scalar _tmp80 = _tmp71 + _tmp73 + _tmp74 + _tmp79;
  const Scalar _tmp81 = 2 * _tmp20;
  const Scalar _tmp82 = (Scalar(1) / Scalar(2)) * _tmp21;
  const Scalar _tmp83 = -_tmp82;
  const Scalar _tmp84 = _tmp63 * _tmp75;
  const Scalar _tmp85 = -_tmp5 * _tmp66;
  const Scalar _tmp86 = _tmp1 * _tmp58 * _tmp59;
  const Scalar _tmp87 = _tmp85 - _tmp86;
  const Scalar _tmp88 = _tmp83 + _tmp84 + _tmp87;
  const Scalar _tmp89 = 2 * _tmp23;
  const Scalar _tmp90 = (Scalar(1) / Scalar(2)) * _tmp24;
  const Scalar _tmp91 = _tmp72 * _tmp75;
  const Scalar _tmp92 = -_tmp91;
  const Scalar _tmp93 = _tmp1 * _tmp13;
  const Scalar _tmp94 = -_tmp77 * _tmp93;
  const Scalar _tmp95 = _tmp3 * _tmp66;
  const Scalar _tmp96 = _tmp94 - _tmp95;
  const Scalar _tmp97 = _tmp90 + _tmp92 + _tmp96;
  const Scalar _tmp98 = 2 * _tmp25;
  const Scalar _tmp99 = _tmp41 * i_R_j_xyzw(2, 0);
  const Scalar _tmp100 = 2 * _tmp99;
  const Scalar _tmp101 = 2 * _tmp37;
  const Scalar _tmp102 = _tmp101 * i_R_j_xyzw(1, 0);
  const Scalar _tmp103 = -_tmp100 + _tmp102;
  const Scalar _tmp104 = (Scalar(1) / Scalar(4)) * _tmp43 * dt;
  const Scalar _tmp105 = _tmp104 * i_R_j_xyzw(0, 0);
  const Scalar _tmp106 = 4 * _tmp31;
  const Scalar _tmp107 = 2 * _tmp41;
  const Scalar _tmp108 = _tmp107 * i_R_j_xyzw(3, 0);
  const Scalar _tmp109 = _tmp101 * i_R_j_xyzw(0, 0);
  const Scalar _tmp110 = -_tmp106 * i_R_j_xyzw(2, 0) - _tmp108 + _tmp109;
  const Scalar _tmp111 = _tmp104 * i_R_j_xyzw(1, 0);
  const Scalar _tmp112 = _tmp107 * i_R_j_xyzw(0, 0);
  const Scalar _tmp113 = _tmp101 * i_R_j_xyzw(3, 0);
  const Scalar _tmp114 = -_tmp106 * i_R_j_xyzw(1, 0) + _tmp112 + _tmp113;
  const Scalar _tmp115 = _tmp104 * i_R_j_xyzw(2, 0);
  const Scalar _tmp116 = _tmp107 * i_R_j_xyzw(1, 0);
  const Scalar _tmp117 = _tmp101 * i_R_j_xyzw(2, 0);
  const Scalar _tmp118 = _tmp116 + _tmp117;
  const Scalar _tmp119 = _tmp104 * i_R_j_xyzw(3, 0);
  const Scalar _tmp120 = 2 * _tmp31;
  const Scalar _tmp121 = _tmp120 * i_R_j_xyzw(1, 0);
  const Scalar _tmp122 = 4 * i_R_j_xyzw(0, 0);
  const Scalar _tmp123 = -_tmp113 + _tmp121 - _tmp122 * _tmp41;
  const Scalar _tmp124 = _tmp120 * i_R_j_xyzw(3, 0);
  const Scalar _tmp125 = _tmp102 + _tmp124 - 4 * _tmp99;
  const Scalar _tmp126 = _tmp120 * i_R_j_xyzw(2, 0);
  const Scalar _tmp127 = -_tmp109 + _tmp126;
  const Scalar _tmp128 = _tmp120 * i_R_j_xyzw(0, 0);
  const Scalar _tmp129 = _tmp117 + _tmp128;
  const Scalar _tmp130 = _tmp104 * _tmp129;
  const Scalar _tmp131 = _tmp108 - _tmp122 * _tmp37 + _tmp126;
  const Scalar _tmp132 = _tmp100 - _tmp124 - 4 * _tmp37 * i_R_j_xyzw(1, 0);
  const Scalar _tmp133 = _tmp116 + _tmp128;
  const Scalar _tmp134 = _tmp112 - _tmp121;
  const Scalar _tmp135 = _tmp114 * _tmp59;
  const Scalar _tmp136 = _tmp110 * _tmp59;
  const Scalar _tmp137 = _tmp118 * _tmp59;
  const Scalar _tmp138 = _tmp123 * _tmp59;
  const Scalar _tmp139 = _tmp125 * _tmp59;
  const Scalar _tmp140 = _tmp129 * _tmp59;
  const Scalar _tmp141 = _tmp132 * _tmp59;
  const Scalar _tmp142 = _tmp131 * _tmp59;
  const Scalar _tmp143 = _tmp133 * _tmp59;
  const Scalar _tmp144 = _tmp134 * _tmp59;
  const Scalar _tmp145 = -_tmp90;
  const Scalar _tmp146 = _tmp145 + _tmp91 + _tmp96;
  const Scalar _tmp147 = -_tmp84;
  const Scalar _tmp148 = _tmp147 + _tmp83 + _tmp85 + _tmp86;
  const Scalar _tmp149 = -_tmp73 + _tmp74;
  const Scalar _tmp150 = _tmp149 + _tmp70 + _tmp79;
  const Scalar _tmp151 = _tmp56 + _tmp67;
  const Scalar _tmp152 = _tmp151 + _tmp61 - _tmp64;
  const Scalar _tmp153 = _tmp103 * _tmp59;
  const Scalar _tmp154 = _tmp127 * _tmp59;
  const Scalar _tmp155 = _tmp147 + _tmp82 + _tmp87;
  const Scalar _tmp156 = _tmp149 + _tmp71 + _tmp78;
  const Scalar _tmp157 = _tmp151 - _tmp61 + _tmp64;
  const Scalar _tmp158 = _tmp145 + _tmp92 + _tmp94 + _tmp95;
  const Scalar _tmp159 = -_tmp22;
  const Scalar _tmp160 = [&]() {
    const Scalar base = dt;
    return base * base * base;
  }();
  const Scalar _tmp161 = _tmp160 / _tmp7;
  const Scalar _tmp162 = _tmp161 * _tmp2;
  const Scalar _tmp163 = _tmp12 * i_R_j_xyzw(0, 0);
  const Scalar _tmp164 = _tmp160 / (_tmp7 * std::sqrt(_tmp7));
  const Scalar _tmp165 = _tmp164 * _tmp2;
  const Scalar _tmp166 = (Scalar(1) / Scalar(2)) * _tmp0;
  const Scalar _tmp167 = _tmp14 * _tmp166;
  const Scalar _tmp168 = _tmp1 * _tmp5;
  const Scalar _tmp169 = _tmp161 * _tmp90;
  const Scalar _tmp170 = _tmp168 * _tmp169;
  const Scalar _tmp171 = _tmp164 * _tmp5;
  const Scalar _tmp172 = _tmp1 * _tmp171;
  const Scalar _tmp173 = _tmp172 * _tmp57;
  const Scalar _tmp174 = _tmp161 * _tmp82;
  const Scalar _tmp175 = _tmp1 * _tmp3;
  const Scalar _tmp176 = _tmp164 * _tmp3;
  const Scalar _tmp177 = _tmp13 * _tmp176;
  const Scalar _tmp178 = _tmp1 * _tmp177 - _tmp174 * _tmp175;
  const Scalar _tmp179 = _tmp159 - _tmp162 * _tmp70 + _tmp163 * _tmp165 - _tmp167 * _tmp76 -
                         _tmp170 + _tmp173 + _tmp178;
  const Scalar _tmp180 = _tmp12 * _tmp165;
  const Scalar _tmp181 = _tmp161 * _tmp70;
  const Scalar _tmp182 = _tmp1 * _tmp163;
  const Scalar _tmp183 = -_tmp168 * _tmp181 + _tmp171 * _tmp182;
  const Scalar _tmp184 = _tmp161 * _tmp175;
  const Scalar _tmp185 = -_tmp176 * _tmp76 + _tmp184 * _tmp56;
  const Scalar _tmp186 =
      _tmp162 * _tmp90 - _tmp167 * _tmp93 + _tmp18 - _tmp180 * i_R_j_xyzw(2, 0) + _tmp183 + _tmp185;
  const Scalar _tmp187 = _tmp166 * _tmp58;
  const Scalar _tmp188 = _tmp184 * _tmp70;
  const Scalar _tmp189 = -_tmp16;
  const Scalar _tmp190 = _tmp176 * _tmp182;
  const Scalar _tmp191 = _tmp161 * _tmp56;
  const Scalar _tmp192 = _tmp168 * _tmp191 - _tmp171 * _tmp76;
  const Scalar _tmp193 =
      -_tmp1 * _tmp187 + _tmp13 * _tmp165 - _tmp174 * _tmp2 + _tmp188 + _tmp189 - _tmp190 + _tmp192;
  const Scalar _tmp194 = _tmp184 * _tmp90;
  const Scalar _tmp195 = _tmp168 * _tmp174;
  const Scalar _tmp196 = _tmp13 * _tmp172;
  const Scalar _tmp197 = _tmp176 * _tmp57;
  const Scalar _tmp198 = _tmp1 * _tmp197;
  const Scalar _tmp199 = _tmp162 * _tmp56 - _tmp167 * _tmp182 - _tmp180 * i_R_j_xyzw(3, 0) +
                         _tmp19 - _tmp194 + _tmp195 - _tmp196 + _tmp198;
  const Scalar _tmp200 = -_tmp179 * _tmp81 + _tmp186 * _tmp98 - _tmp193 * _tmp89 + _tmp199 * _tmp69;
  const Scalar _tmp201 = -_tmp179 * _tmp89 + _tmp186 * _tmp69 + _tmp193 * _tmp81 - _tmp199 * _tmp98;
  const Scalar _tmp202 = -_tmp179 * _tmp98 - _tmp186 * _tmp81 + _tmp193 * _tmp69 + _tmp199 * _tmp89;
  const Scalar _tmp203 = _tmp164 * _tmp4;
  const Scalar _tmp204 = _tmp167 * _tmp3;
  const Scalar _tmp205 = _tmp3 * _tmp5;
  const Scalar _tmp206 = -_tmp169 * _tmp205 + _tmp197 * _tmp5;
  const Scalar _tmp207 =
      _tmp13 * _tmp203 - _tmp174 * _tmp4 - _tmp188 + _tmp189 + _tmp190 - _tmp204 * _tmp75 + _tmp206;
  const Scalar _tmp208 = _tmp161 * _tmp4;
  const Scalar _tmp209 = _tmp181 * _tmp205;
  const Scalar _tmp210 = _tmp176 * _tmp5;
  const Scalar _tmp211 = _tmp163 * _tmp210;
  const Scalar _tmp212 = -_tmp13 * _tmp204 + _tmp19 + _tmp194 - _tmp198 - _tmp203 * _tmp75 +
                         _tmp208 * _tmp56 - _tmp209 + _tmp211;
  const Scalar _tmp213 = _tmp191 * _tmp205 - _tmp210 * _tmp75;
  const Scalar _tmp214 =
      -_tmp163 * _tmp203 + _tmp178 - _tmp187 * _tmp3 + _tmp208 * _tmp70 + _tmp213 + _tmp22;
  const Scalar _tmp215 = -_tmp18;
  const Scalar _tmp216 = _tmp163 * _tmp167;
  const Scalar _tmp217 = _tmp174 * _tmp205;
  const Scalar _tmp218 = _tmp177 * _tmp5;
  const Scalar _tmp219 =
      _tmp185 + _tmp203 * _tmp57 - _tmp208 * _tmp90 + _tmp215 - _tmp216 * _tmp3 + _tmp217 - _tmp218;
  const Scalar _tmp220 = -_tmp207 * _tmp81 + _tmp212 * _tmp98 - _tmp214 * _tmp89 + _tmp219 * _tmp69;
  const Scalar _tmp221 = -_tmp207 * _tmp89 + _tmp212 * _tmp69 + _tmp214 * _tmp81 - _tmp219 * _tmp98;
  const Scalar _tmp222 = -_tmp207 * _tmp98 - _tmp212 * _tmp81 + _tmp214 * _tmp69 + _tmp219 * _tmp89;
  const Scalar _tmp223 = _tmp161 * _tmp6;
  const Scalar _tmp224 = _tmp164 * _tmp6;
  const Scalar _tmp225 = -_tmp187 * _tmp5 + _tmp19 - _tmp195 + _tmp196 + _tmp209 - _tmp211 +
                         _tmp223 * _tmp56 - _tmp224 * _tmp75;
  const Scalar _tmp226 = _tmp167 * _tmp5;
  const Scalar _tmp227 = -_tmp13 * _tmp226 + _tmp159 + _tmp163 * _tmp224 + _tmp170 - _tmp173 +
                         _tmp213 - _tmp223 * _tmp70;
  const Scalar _tmp228 = _tmp183 + _tmp215 - _tmp217 + _tmp218 - _tmp223 * _tmp90 +
                         _tmp224 * _tmp57 - _tmp226 * _tmp75;
  const Scalar _tmp229 =
      -_tmp13 * _tmp224 + _tmp16 + _tmp174 * _tmp6 + _tmp192 + _tmp206 - _tmp216 * _tmp5;
  const Scalar _tmp230 = -_tmp225 * _tmp89 + _tmp227 * _tmp98 - _tmp228 * _tmp81 + _tmp229 * _tmp69;
  const Scalar _tmp231 = _tmp225 * _tmp81 + _tmp227 * _tmp69 - _tmp228 * _tmp89 - _tmp229 * _tmp98;
  const Scalar _tmp232 = _tmp225 * _tmp69 - _tmp227 * _tmp81 - _tmp228 * _tmp98 + _tmp229 * _tmp89;
  const Scalar _tmp233 = _tmp30 * dt;
  const Scalar _tmp234 = _tmp233 * _tmp44;
  const Scalar _tmp235 = _tmp50 * dt;
  const Scalar _tmp236 = _tmp235 * _tmp44;
  const Scalar _tmp237 = _tmp53 * dt;
  const Scalar _tmp238 = _tmp237 * _tmp44;
  const Scalar _tmp239 = _tmp40 * dt;
  const Scalar _tmp240 = _tmp239 * _tmp44;
  const Scalar _tmp241 = _tmp46 * dt;
  const Scalar _tmp242 = _tmp241 * _tmp44;
  const Scalar _tmp243 = _tmp54 * dt;
  const Scalar _tmp244 = _tmp243 * _tmp44;
  const Scalar _tmp245 = _tmp36 * dt;
  const Scalar _tmp246 = _tmp245 * _tmp44;
  const Scalar _tmp247 = _tmp49 * dt;
  const Scalar _tmp248 = _tmp247 * _tmp44;
  const Scalar _tmp249 = _tmp52 * dt;
  const Scalar _tmp250 = _tmp249 * _tmp44;

  // Output terms (6)
  if (i_R_k != nullptr) {
    Eigen::Matrix<Scalar, 4, 1>& _i_R_k = (*i_R_k);

    _i_R_k(0, 0) = _tmp20;
    _i_R_k(1, 0) = _tmp23;
    _i_R_k(2, 0) = _tmp25;
    _i_R_k(3, 0) = _tmp27;
  }

  if (i_p_k != nullptr) {
    Eigen::Matrix<Scalar, 3, 1>& _i_p_k = (*i_p_k);

    _i_p_k(0, 0) = _tmp42 * _tmp44 + dt * i_v_j(0, 0) + i_p_j(0, 0);
    _i_p_k(1, 0) = _tmp44 * _tmp51 + dt * i_v_j(1, 0) + i_p_j(1, 0);
    _i_p_k(2, 0) = _tmp44 * _tmp55 + dt * i_v_j(2, 0) + i_p_j(2, 0);
  }

  if (i_v_k != nullptr) {
    Eigen::Matrix<Scalar, 3, 1>& _i_v_k = (*i_v_k);

    _i_v_k(0, 0) = _tmp42 + i_v_j(0, 0);
    _i_v_k(1, 0) = _tmp51 + i_v_j(1, 0);
    _i_v_k(2, 0) = _tmp55 + i_v_j(2, 0);
  }

  if (k_D_j != nullptr) {
    Eigen::Matrix<Scalar, 9, 9>& _k_D_j = (*k_D_j);

    _k_D_j.setZero();

    _k_D_j(0, 0) = _tmp68 * _tmp69 - _tmp80 * _tmp81 - _tmp88 * _tmp89 + _tmp97 * _tmp98;
    _k_D_j(1, 0) = -_tmp68 * _tmp98 + _tmp69 * _tmp97 - _tmp80 * _tmp89 + _tmp81 * _tmp88;
    _k_D_j(2, 0) = _tmp68 * _tmp89 + _tmp69 * _tmp88 - _tmp80 * _tmp98 - _tmp81 * _tmp97;
    _k_D_j(3, 0) = -_tmp103 * _tmp105 - _tmp110 * _tmp111 + _tmp114 * _tmp115 + _tmp118 * _tmp119;
    _k_D_j(4, 0) =
        -_tmp105 * _tmp127 - _tmp111 * _tmp125 + _tmp119 * _tmp123 + _tmp130 * i_R_j_xyzw(2, 0);
    _k_D_j(5, 0) = -_tmp105 * _tmp134 - _tmp111 * _tmp133 + _tmp115 * _tmp132 + _tmp119 * _tmp131;
    _k_D_j(6, 0) = -_tmp103 * _tmp65 + _tmp135 * i_R_j_xyzw(2, 0) - _tmp136 * i_R_j_xyzw(1, 0) +
                   _tmp137 * i_R_j_xyzw(3, 0);
    _k_D_j(7, 0) = -_tmp127 * _tmp65 + _tmp138 * i_R_j_xyzw(3, 0) - _tmp139 * i_R_j_xyzw(1, 0) +
                   _tmp140 * i_R_j_xyzw(2, 0);
    _k_D_j(8, 0) = _tmp141 * i_R_j_xyzw(2, 0) + _tmp142 * i_R_j_xyzw(3, 0) -
                   _tmp143 * i_R_j_xyzw(1, 0) - _tmp144 * i_R_j_xyzw(0, 0);
    _k_D_j(0, 1) = _tmp146 * _tmp69 - _tmp148 * _tmp81 - _tmp150 * _tmp89 + _tmp152 * _tmp98;
    _k_D_j(1, 1) = -_tmp146 * _tmp98 - _tmp148 * _tmp89 + _tmp150 * _tmp81 + _tmp152 * _tmp69;
    _k_D_j(2, 1) = _tmp146 * _tmp89 - _tmp148 * _tmp98 + _tmp150 * _tmp69 - _tmp152 * _tmp81;
    _k_D_j(3, 1) = -_tmp103 * _tmp111 + _tmp105 * _tmp110 + _tmp114 * _tmp119 - _tmp115 * _tmp118;
    _k_D_j(4, 1) = _tmp105 * _tmp125 - _tmp111 * _tmp127 - _tmp115 * _tmp123 + _tmp119 * _tmp129;
    _k_D_j(5, 1) = _tmp105 * _tmp133 - _tmp111 * _tmp134 - _tmp115 * _tmp131 + _tmp119 * _tmp132;
    _k_D_j(6, 1) = _tmp110 * _tmp65 + _tmp135 * i_R_j_xyzw(3, 0) - _tmp137 * i_R_j_xyzw(2, 0) -
                   _tmp153 * i_R_j_xyzw(1, 0);
    _k_D_j(7, 1) = _tmp125 * _tmp65 - _tmp138 * i_R_j_xyzw(2, 0) + _tmp140 * i_R_j_xyzw(3, 0) -
                   _tmp154 * i_R_j_xyzw(1, 0);
    _k_D_j(8, 1) = _tmp141 * i_R_j_xyzw(3, 0) - _tmp142 * i_R_j_xyzw(2, 0) +
                   _tmp143 * i_R_j_xyzw(0, 0) - _tmp144 * i_R_j_xyzw(1, 0);
    _k_D_j(0, 2) = _tmp155 * _tmp69 + _tmp156 * _tmp98 - _tmp157 * _tmp89 - _tmp158 * _tmp81;
    _k_D_j(1, 2) = -_tmp155 * _tmp98 + _tmp156 * _tmp69 + _tmp157 * _tmp81 - _tmp158 * _tmp89;
    _k_D_j(2, 2) = _tmp155 * _tmp89 - _tmp156 * _tmp81 + _tmp157 * _tmp69 - _tmp158 * _tmp98;
    _k_D_j(3, 2) = -_tmp103 * _tmp115 - _tmp105 * _tmp114 + _tmp110 * _tmp119 + _tmp111 * _tmp118;
    _k_D_j(4, 2) =
        _tmp111 * _tmp123 - _tmp115 * _tmp127 + _tmp119 * _tmp125 - _tmp130 * i_R_j_xyzw(0, 0);
    _k_D_j(5, 2) = -_tmp105 * _tmp132 + _tmp111 * _tmp131 - _tmp115 * _tmp134 + _tmp119 * _tmp133;
    _k_D_j(6, 2) = -_tmp114 * _tmp65 + _tmp136 * i_R_j_xyzw(3, 0) + _tmp137 * i_R_j_xyzw(1, 0) -
                   _tmp153 * i_R_j_xyzw(2, 0);
    _k_D_j(7, 2) = -_tmp129 * _tmp65 + _tmp138 * i_R_j_xyzw(1, 0) + _tmp139 * i_R_j_xyzw(3, 0) -
                   _tmp154 * i_R_j_xyzw(2, 0);
    _k_D_j(8, 2) = -_tmp132 * _tmp65 + _tmp142 * i_R_j_xyzw(1, 0) + _tmp143 * i_R_j_xyzw(3, 0) -
                   _tmp144 * i_R_j_xyzw(2, 0);
    _k_D_j(3, 3) = 1;
    _k_D_j(4, 4) = 1;
    _k_D_j(5, 5) = 1;
    _k_D_j(3, 6) = dt;
    _k_D_j(6, 6) = 1;
    _k_D_j(4, 7) = dt;
    _k_D_j(7, 7) = 1;
    _k_D_j(5, 8) = dt;
    _k_D_j(8, 8) = 1;
  }

  if (k_D_measurements != nullptr) {
    Eigen::Matrix<Scalar, 9, 6>& _k_D_measurements = (*k_D_measurements);

    _k_D_measurements(0, 0) = _tmp200;
    _k_D_measurements(1, 0) = _tmp201;
    _k_D_measurements(2, 0) = _tmp202;
    _k_D_measurements(3, 0) = 0;
    _k_D_measurements(4, 0) = 0;
    _k_D_measurements(5, 0) = 0;
    _k_D_measurements(6, 0) = 0;
    _k_D_measurements(7, 0) = 0;
    _k_D_measurements(8, 0) = 0;
    _k_D_measurements(0, 1) = _tmp220;
    _k_D_measurements(1, 1) = _tmp221;
    _k_D_measurements(2, 1) = _tmp222;
    _k_D_measurements(3, 1) = 0;
    _k_D_measurements(4, 1) = 0;
    _k_D_measurements(5, 1) = 0;
    _k_D_measurements(6, 1) = 0;
    _k_D_measurements(7, 1) = 0;
    _k_D_measurements(8, 1) = 0;
    _k_D_measurements(0, 2) = _tmp230;
    _k_D_measurements(1, 2) = _tmp231;
    _k_D_measurements(2, 2) = _tmp232;
    _k_D_measurements(3, 2) = 0;
    _k_D_measurements(4, 2) = 0;
    _k_D_measurements(5, 2) = 0;
    _k_D_measurements(6, 2) = 0;
    _k_D_measurements(7, 2) = 0;
    _k_D_measurements(8, 2) = 0;
    _k_D_measurements(0, 3) = 0;
    _k_D_measurements(1, 3) = 0;
    _k_D_measurements(2, 3) = 0;
    _k_D_measurements(3, 3) = _tmp234;
    _k_D_measurements(4, 3) = _tmp236;
    _k_D_measurements(5, 3) = _tmp238;
    _k_D_measurements(6, 3) = _tmp233;
    _k_D_measurements(7, 3) = _tmp235;
    _k_D_measurements(8, 3) = _tmp237;
    _k_D_measurements(0, 4) = 0;
    _k_D_measurements(1, 4) = 0;
    _k_D_measurements(2, 4) = 0;
    _k_D_measurements(3, 4) = _tmp240;
    _k_D_measurements(4, 4) = _tmp242;
    _k_D_measurements(5, 4) = _tmp244;
    _k_D_measurements(6, 4) = _tmp239;
    _k_D_measurements(7, 4) = _tmp241;
    _k_D_measurements(8, 4) = _tmp243;
    _k_D_measurements(0, 5) = 0;
    _k_D_measurements(1, 5) = 0;
    _k_D_measurements(2, 5) = 0;
    _k_D_measurements(3, 5) = _tmp246;
    _k_D_measurements(4, 5) = _tmp248;
    _k_D_measurements(5, 5) = _tmp250;
    _k_D_measurements(6, 5) = _tmp245;
    _k_D_measurements(7, 5) = _tmp247;
    _k_D_measurements(8, 5) = _tmp249;
  }

  if (k_D_bias != nullptr) {
    Eigen::Matrix<Scalar, 9, 6>& _k_D_bias = (*k_D_bias);

    _k_D_bias(0, 0) = -_tmp200;
    _k_D_bias(1, 0) = -_tmp201;
    _k_D_bias(2, 0) = -_tmp202;
    _k_D_bias(3, 0) = 0;
    _k_D_bias(4, 0) = 0;
    _k_D_bias(5, 0) = 0;
    _k_D_bias(6, 0) = 0;
    _k_D_bias(7, 0) = 0;
    _k_D_bias(8, 0) = 0;
    _k_D_bias(0, 1) = -_tmp220;
    _k_D_bias(1, 1) = -_tmp221;
    _k_D_bias(2, 1) = -_tmp222;
    _k_D_bias(3, 1) = 0;
    _k_D_bias(4, 1) = 0;
    _k_D_bias(5, 1) = 0;
    _k_D_bias(6, 1) = 0;
    _k_D_bias(7, 1) = 0;
    _k_D_bias(8, 1) = 0;
    _k_D_bias(0, 2) = -_tmp230;
    _k_D_bias(1, 2) = -_tmp231;
    _k_D_bias(2, 2) = -_tmp232;
    _k_D_bias(3, 2) = 0;
    _k_D_bias(4, 2) = 0;
    _k_D_bias(5, 2) = 0;
    _k_D_bias(6, 2) = 0;
    _k_D_bias(7, 2) = 0;
    _k_D_bias(8, 2) = 0;
    _k_D_bias(0, 3) = 0;
    _k_D_bias(1, 3) = 0;
    _k_D_bias(2, 3) = 0;
    _k_D_bias(3, 3) = -_tmp234;
    _k_D_bias(4, 3) = -_tmp236;
    _k_D_bias(5, 3) = -_tmp238;
    _k_D_bias(6, 3) = -_tmp233;
    _k_D_bias(7, 3) = -_tmp235;
    _k_D_bias(8, 3) = -_tmp237;
    _k_D_bias(0, 4) = 0;
    _k_D_bias(1, 4) = 0;
    _k_D_bias(2, 4) = 0;
    _k_D_bias(3, 4) = -_tmp240;
    _k_D_bias(4, 4) = -_tmp242;
    _k_D_bias(5, 4) = -_tmp244;
    _k_D_bias(6, 4) = -_tmp239;
    _k_D_bias(7, 4) = -_tmp241;
    _k_D_bias(8, 4) = -_tmp243;
    _k_D_bias(0, 5) = 0;
    _k_D_bias(1, 5) = 0;
    _k_D_bias(2, 5) = 0;
    _k_D_bias(3, 5) = -_tmp246;
    _k_D_bias(4, 5) = -_tmp248;
    _k_D_bias(5, 5) = -_tmp250;
    _k_D_bias(6, 5) = -_tmp245;
    _k_D_bias(7, 5) = -_tmp247;
    _k_D_bias(8, 5) = -_tmp249;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
