// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

namespace sym {

/**
 * This function was autogenerated. Do not modify by hand.
 *
 * Args:
 *     i_R_j_xyzw: Matrix41
 *     i_p_j: Matrix31
 *     i_v_j: Matrix31
 *     gyro_bias: Matrix31
 *     accelerometer_bias: Matrix31
 *     angular_velocity: Matrix31
 *     linear_acceleration: Matrix31
 *     dt: Scalar
 *
 * Outputs:
 *     i_R_k: Matrix41
 *     i_p_k: Matrix31
 *     i_v_k: Matrix31
 *     k_D_j: Matrix99
 *     k_D_measurements: Matrix96
 *     k_D_bias: Matrix96
 */
template <typename Scalar>
void IntegrateImuFirstOrder(const Eigen::Matrix<Scalar, 4, 1>& i_R_j_xyzw,
                            const Eigen::Matrix<Scalar, 3, 1>& i_p_j,
                            const Eigen::Matrix<Scalar, 3, 1>& i_v_j,
                            const Eigen::Matrix<Scalar, 3, 1>& gyro_bias,
                            const Eigen::Matrix<Scalar, 3, 1>& accelerometer_bias,
                            const Eigen::Matrix<Scalar, 3, 1>& angular_velocity,
                            const Eigen::Matrix<Scalar, 3, 1>& linear_acceleration, const Scalar dt,
                            Eigen::Matrix<Scalar, 4, 1>* const i_R_k = nullptr,
                            Eigen::Matrix<Scalar, 3, 1>* const i_p_k = nullptr,
                            Eigen::Matrix<Scalar, 3, 1>* const i_v_k = nullptr,
                            Eigen::Matrix<Scalar, 9, 9>* const k_D_j = nullptr,
                            Eigen::Matrix<Scalar, 9, 6>* const k_D_measurements = nullptr,
                            Eigen::Matrix<Scalar, 9, 6>* const k_D_bias = nullptr) {
  // Total ops: 602

  // Input arrays

  // Intermediate terms (227)
  const Scalar _tmp0 = std::pow(dt, Scalar(2));
  const Scalar _tmp1 = angular_velocity(0, 0) - gyro_bias(0, 0);
  const Scalar _tmp2 = std::pow(_tmp1, Scalar(2));
  const Scalar _tmp3 = angular_velocity(1, 0) - gyro_bias(1, 0);
  const Scalar _tmp4 = std::pow(_tmp3, Scalar(2));
  const Scalar _tmp5 = angular_velocity(2, 0) - gyro_bias(2, 0);
  const Scalar _tmp6 = std::pow(_tmp5, Scalar(2));
  const Scalar _tmp7 =
      _tmp0 * _tmp2 + _tmp0 * _tmp4 + _tmp0 * _tmp6 + Scalar(1.0000000000000001e-32);
  const Scalar _tmp8 = std::sqrt(_tmp7);
  const Scalar _tmp9 = (Scalar(1) / Scalar(2)) * _tmp8;
  const Scalar _tmp10 = std::cos(_tmp9);
  const Scalar _tmp11 = _tmp10 * i_R_j_xyzw(0, 0);
  const Scalar _tmp12 = std::sin(_tmp9);
  const Scalar _tmp13 = Scalar(1.0) / (_tmp8);
  const Scalar _tmp14 = _tmp13 * dt;
  const Scalar _tmp15 = _tmp12 * _tmp14;
  const Scalar _tmp16 = _tmp15 * i_R_j_xyzw(1, 0);
  const Scalar _tmp17 = _tmp16 * _tmp5;
  const Scalar _tmp18 = _tmp12 * i_R_j_xyzw(2, 0);
  const Scalar _tmp19 = _tmp14 * _tmp18;
  const Scalar _tmp20 = _tmp19 * _tmp3;
  const Scalar _tmp21 = _tmp15 * i_R_j_xyzw(3, 0);
  const Scalar _tmp22 = _tmp1 * _tmp21;
  const Scalar _tmp23 = _tmp11 + _tmp17 - _tmp20 + _tmp22;
  const Scalar _tmp24 = _tmp10 * i_R_j_xyzw(1, 0);
  const Scalar _tmp25 = _tmp15 * i_R_j_xyzw(0, 0);
  const Scalar _tmp26 = _tmp25 * _tmp5;
  const Scalar _tmp27 = _tmp1 * _tmp19;
  const Scalar _tmp28 = _tmp21 * _tmp3;
  const Scalar _tmp29 = _tmp24 - _tmp26 + _tmp27 + _tmp28;
  const Scalar _tmp30 = _tmp10 * i_R_j_xyzw(2, 0);
  const Scalar _tmp31 = _tmp21 * _tmp5;
  const Scalar _tmp32 = _tmp1 * _tmp16;
  const Scalar _tmp33 = _tmp25 * _tmp3;
  const Scalar _tmp34 = _tmp30 + _tmp31 - _tmp32 + _tmp33;
  const Scalar _tmp35 = _tmp19 * _tmp5;
  const Scalar _tmp36 = _tmp16 * _tmp3;
  const Scalar _tmp37 = _tmp1 * _tmp25;
  const Scalar _tmp38 = _tmp10 * i_R_j_xyzw(3, 0);
  const Scalar _tmp39 = -_tmp35 - _tmp36 - _tmp37 + _tmp38;
  const Scalar _tmp40 = std::pow(i_R_j_xyzw(1, 0), Scalar(2));
  const Scalar _tmp41 = -2 * _tmp40;
  const Scalar _tmp42 = std::pow(i_R_j_xyzw(2, 0), Scalar(2));
  const Scalar _tmp43 = -2 * _tmp42;
  const Scalar _tmp44 = _tmp41 + _tmp43 + 1;
  const Scalar _tmp45 = -accelerometer_bias(0, 0) + linear_acceleration(0, 0);
  const Scalar _tmp46 = 2 * i_R_j_xyzw(1, 0) * i_R_j_xyzw(3, 0);
  const Scalar _tmp47 = 2 * i_R_j_xyzw(0, 0);
  const Scalar _tmp48 = _tmp47 * i_R_j_xyzw(2, 0);
  const Scalar _tmp49 = _tmp46 + _tmp48;
  const Scalar _tmp50 = -accelerometer_bias(2, 0) + linear_acceleration(2, 0);
  const Scalar _tmp51 = 2 * i_R_j_xyzw(2, 0);
  const Scalar _tmp52 = _tmp51 * i_R_j_xyzw(3, 0);
  const Scalar _tmp53 = -_tmp52;
  const Scalar _tmp54 = _tmp47 * i_R_j_xyzw(1, 0);
  const Scalar _tmp55 = _tmp53 + _tmp54;
  const Scalar _tmp56 = -accelerometer_bias(1, 0) + linear_acceleration(1, 0);
  const Scalar _tmp57 = dt * (_tmp44 * _tmp45 + _tmp49 * _tmp50 + _tmp55 * _tmp56);
  const Scalar _tmp58 = (Scalar(1) / Scalar(2)) * std::fabs(dt);
  const Scalar _tmp59 = std::pow(i_R_j_xyzw(0, 0), Scalar(2));
  const Scalar _tmp60 = 1 - 2 * _tmp59;
  const Scalar _tmp61 = _tmp43 + _tmp60;
  const Scalar _tmp62 = _tmp47 * i_R_j_xyzw(3, 0);
  const Scalar _tmp63 = -_tmp62;
  const Scalar _tmp64 = _tmp51 * i_R_j_xyzw(1, 0);
  const Scalar _tmp65 = _tmp63 + _tmp64;
  const Scalar _tmp66 = _tmp52 + _tmp54;
  const Scalar _tmp67 = dt * (_tmp45 * _tmp66 + _tmp50 * _tmp65 + _tmp56 * _tmp61);
  const Scalar _tmp68 = _tmp41 + _tmp60;
  const Scalar _tmp69 = -_tmp46;
  const Scalar _tmp70 = _tmp48 + _tmp69;
  const Scalar _tmp71 = _tmp62 + _tmp64;
  const Scalar _tmp72 = dt * (_tmp45 * _tmp70 + _tmp50 * _tmp68 + _tmp56 * _tmp71);
  const Scalar _tmp73 = (Scalar(1) / Scalar(2)) * _tmp38;
  const Scalar _tmp74 = (Scalar(1) / Scalar(2)) * _tmp35;
  const Scalar _tmp75 = (Scalar(1) / Scalar(2)) * _tmp36;
  const Scalar _tmp76 = (Scalar(1) / Scalar(2)) * _tmp37;
  const Scalar _tmp77 = _tmp73 + _tmp74 + _tmp75 - _tmp76;
  const Scalar _tmp78 = 2 * _tmp39;
  const Scalar _tmp79 = (Scalar(1) / Scalar(2)) * _tmp11;
  const Scalar _tmp80 = -_tmp79;
  const Scalar _tmp81 = (Scalar(1) / Scalar(2)) * _tmp17;
  const Scalar _tmp82 = -Scalar(1) / Scalar(2) * _tmp20;
  const Scalar _tmp83 = (Scalar(1) / Scalar(2)) * _tmp22;
  const Scalar _tmp84 = -_tmp83;
  const Scalar _tmp85 = _tmp80 + _tmp81 + _tmp82 + _tmp84;
  const Scalar _tmp86 = 2 * _tmp23;
  const Scalar _tmp87 = (Scalar(1) / Scalar(2)) * _tmp27;
  const Scalar _tmp88 = -_tmp87;
  const Scalar _tmp89 = (Scalar(1) / Scalar(2)) * _tmp28;
  const Scalar _tmp90 = (Scalar(1) / Scalar(2)) * _tmp24;
  const Scalar _tmp91 = -Scalar(1) / Scalar(2) * _tmp26;
  const Scalar _tmp92 = -_tmp90 + _tmp91;
  const Scalar _tmp93 = _tmp88 + _tmp89 + _tmp92;
  const Scalar _tmp94 = 2 * _tmp29;
  const Scalar _tmp95 = (Scalar(1) / Scalar(2)) * _tmp30;
  const Scalar _tmp96 = (Scalar(1) / Scalar(2)) * _tmp31;
  const Scalar _tmp97 = -_tmp96;
  const Scalar _tmp98 = -Scalar(1) / Scalar(2) * _tmp32;
  const Scalar _tmp99 = (Scalar(1) / Scalar(2)) * _tmp33;
  const Scalar _tmp100 = -_tmp99;
  const Scalar _tmp101 = _tmp100 + _tmp95 + _tmp97 + _tmp98;
  const Scalar _tmp102 = 2 * _tmp34;
  const Scalar _tmp103 = -_tmp54;
  const Scalar _tmp104 = dt * (_tmp49 * _tmp56 + _tmp50 * (_tmp103 + _tmp52));
  const Scalar _tmp105 = std::pow(i_R_j_xyzw(3, 0), Scalar(2));
  const Scalar _tmp106 = -_tmp105;
  const Scalar _tmp107 = -_tmp40;
  const Scalar _tmp108 = dt * (_tmp50 * (_tmp106 + _tmp107 + _tmp42 + _tmp59) + _tmp56 * _tmp65);
  const Scalar _tmp109 = _tmp105 + _tmp107;
  const Scalar _tmp110 = -_tmp59;
  const Scalar _tmp111 = _tmp110 + _tmp42;
  const Scalar _tmp112 = -_tmp64;
  const Scalar _tmp113 = dt * (_tmp50 * (_tmp112 + _tmp63) + _tmp56 * (_tmp109 + _tmp111));
  const Scalar _tmp114 = -_tmp95 + _tmp98;
  const Scalar _tmp115 = _tmp100 + _tmp114 + _tmp96;
  const Scalar _tmp116 = -_tmp89;
  const Scalar _tmp117 = _tmp116 + _tmp87 + _tmp92;
  const Scalar _tmp118 = -_tmp81 + _tmp82;
  const Scalar _tmp119 = _tmp118 + _tmp79 + _tmp84;
  const Scalar _tmp120 = _tmp73 + _tmp76;
  const Scalar _tmp121 = _tmp120 + _tmp74 - _tmp75;
  const Scalar _tmp122 = -_tmp42;
  const Scalar _tmp123 = _tmp122 + _tmp59;
  const Scalar _tmp124 = -_tmp48;
  const Scalar _tmp125 = dt * (_tmp45 * (_tmp124 + _tmp69) + _tmp50 * (_tmp109 + _tmp123));
  const Scalar _tmp126 = dt * (_tmp45 * (_tmp112 + _tmp62) + _tmp50 * _tmp66);
  const Scalar _tmp127 = _tmp106 + _tmp40;
  const Scalar _tmp128 = dt * (_tmp45 * (_tmp123 + _tmp127) + _tmp50 * _tmp70);
  const Scalar _tmp129 = _tmp116 + _tmp88 + _tmp90 + _tmp91;
  const Scalar _tmp130 = _tmp118 + _tmp80 + _tmp83;
  const Scalar _tmp131 = _tmp120 - _tmp74 + _tmp75;
  const Scalar _tmp132 = _tmp114 + _tmp97 + _tmp99;
  const Scalar _tmp133 = dt * (_tmp45 * _tmp55 + _tmp56 * (_tmp111 + _tmp127));
  const Scalar _tmp134 =
      dt * (_tmp45 * (_tmp105 + _tmp110 + _tmp122 + _tmp40) + _tmp56 * (_tmp103 + _tmp53));
  const Scalar _tmp135 = dt * (_tmp45 * _tmp71 + _tmp56 * (_tmp124 + _tmp46));
  const Scalar _tmp136 = -_tmp25;
  const Scalar _tmp137 = [&]() {
    const Scalar base = dt;
    return base * base * base;
  }();
  const Scalar _tmp138 = _tmp137 / _tmp7;
  const Scalar _tmp139 = _tmp138 * _tmp2;
  const Scalar _tmp140 = _tmp137 / (_tmp7 * std::sqrt(_tmp7));
  const Scalar _tmp141 = _tmp140 * _tmp2;
  const Scalar _tmp142 = _tmp12 * i_R_j_xyzw(0, 0);
  const Scalar _tmp143 = _tmp12 * i_R_j_xyzw(3, 0);
  const Scalar _tmp144 = (Scalar(1) / Scalar(2)) * _tmp0 * _tmp13;
  const Scalar _tmp145 = _tmp143 * _tmp144;
  const Scalar _tmp146 = _tmp1 * _tmp5;
  const Scalar _tmp147 = _tmp138 * _tmp146;
  const Scalar _tmp148 = _tmp147 * _tmp95;
  const Scalar _tmp149 = _tmp1 * _tmp140;
  const Scalar _tmp150 = _tmp18 * _tmp5;
  const Scalar _tmp151 = _tmp149 * _tmp150;
  const Scalar _tmp152 = _tmp138 * _tmp3;
  const Scalar _tmp153 = _tmp1 * _tmp152;
  const Scalar _tmp154 = _tmp12 * i_R_j_xyzw(1, 0);
  const Scalar _tmp155 = _tmp140 * _tmp154;
  const Scalar _tmp156 = _tmp155 * _tmp3;
  const Scalar _tmp157 = _tmp1 * _tmp156 - _tmp153 * _tmp90;
  const Scalar _tmp158 = -_tmp1 * _tmp145 + _tmp136 - _tmp139 * _tmp79 + _tmp141 * _tmp142 -
                         _tmp148 + _tmp151 + _tmp157;
  const Scalar _tmp159 = _tmp144 * _tmp154;
  const Scalar _tmp160 = _tmp1 * _tmp142;
  const Scalar _tmp161 = _tmp140 * _tmp5;
  const Scalar _tmp162 = -_tmp147 * _tmp79 + _tmp160 * _tmp161;
  const Scalar _tmp163 = _tmp140 * _tmp3;
  const Scalar _tmp164 = _tmp1 * _tmp163;
  const Scalar _tmp165 = -_tmp143 * _tmp164 + _tmp153 * _tmp73;
  const Scalar _tmp166 =
      -_tmp1 * _tmp159 + _tmp139 * _tmp95 - _tmp141 * _tmp18 + _tmp162 + _tmp165 + _tmp19;
  const Scalar _tmp167 = -_tmp16;
  const Scalar _tmp168 = _tmp144 * _tmp18;
  const Scalar _tmp169 = _tmp153 * _tmp79;
  const Scalar _tmp170 = _tmp142 * _tmp3;
  const Scalar _tmp171 = _tmp149 * _tmp170;
  const Scalar _tmp172 = _tmp143 * _tmp5;
  const Scalar _tmp173 = _tmp147 * _tmp73 - _tmp149 * _tmp172;
  const Scalar _tmp174 =
      -_tmp1 * _tmp168 - _tmp139 * _tmp90 + _tmp155 * _tmp2 + _tmp167 + _tmp169 - _tmp171 + _tmp173;
  const Scalar _tmp175 = _tmp153 * _tmp95;
  const Scalar _tmp176 = _tmp147 * _tmp90;
  const Scalar _tmp177 = _tmp146 * _tmp155;
  const Scalar _tmp178 = _tmp164 * _tmp18;
  const Scalar _tmp179 = _tmp139 * _tmp73 - _tmp141 * _tmp143 - _tmp144 * _tmp160 - _tmp175 +
                         _tmp176 - _tmp177 + _tmp178 + _tmp21;
  const Scalar _tmp180 = _tmp102 * _tmp166 - _tmp158 * _tmp86 - _tmp174 * _tmp94 + _tmp179 * _tmp78;
  const Scalar _tmp181 =
      -_tmp102 * _tmp179 - _tmp158 * _tmp94 + _tmp166 * _tmp78 + _tmp174 * _tmp86;
  const Scalar _tmp182 =
      -_tmp102 * _tmp158 - _tmp166 * _tmp86 + _tmp174 * _tmp78 + _tmp179 * _tmp94;
  const Scalar _tmp183 = _tmp138 * _tmp4;
  const Scalar _tmp184 = _tmp152 * _tmp5;
  const Scalar _tmp185 = _tmp150 * _tmp163 - _tmp184 * _tmp95;
  const Scalar _tmp186 =
      -_tmp145 * _tmp3 + _tmp155 * _tmp4 + _tmp167 - _tmp169 + _tmp171 - _tmp183 * _tmp90 + _tmp185;
  const Scalar _tmp187 = _tmp140 * _tmp4;
  const Scalar _tmp188 = _tmp184 * _tmp79;
  const Scalar _tmp189 = _tmp161 * _tmp170;
  const Scalar _tmp190 = -_tmp143 * _tmp187 - _tmp159 * _tmp3 + _tmp175 - _tmp178 +
                         _tmp183 * _tmp73 - _tmp188 + _tmp189 + _tmp21;
  const Scalar _tmp191 = -_tmp163 * _tmp172 + _tmp184 * _tmp73;
  const Scalar _tmp192 =
      -_tmp142 * _tmp187 + _tmp157 - _tmp168 * _tmp3 + _tmp183 * _tmp79 + _tmp191 + _tmp25;
  const Scalar _tmp193 = -_tmp19;
  const Scalar _tmp194 = _tmp184 * _tmp90;
  const Scalar _tmp195 = _tmp156 * _tmp5;
  const Scalar _tmp196 = -_tmp144 * _tmp170 + _tmp165 + _tmp18 * _tmp187 - _tmp183 * _tmp95 +
                         _tmp193 + _tmp194 - _tmp195;
  const Scalar _tmp197 = _tmp102 * _tmp190 - _tmp186 * _tmp86 - _tmp192 * _tmp94 + _tmp196 * _tmp78;
  const Scalar _tmp198 =
      -_tmp102 * _tmp196 - _tmp186 * _tmp94 + _tmp190 * _tmp78 + _tmp192 * _tmp86;
  const Scalar _tmp199 =
      -_tmp102 * _tmp186 - _tmp190 * _tmp86 + _tmp192 * _tmp78 + _tmp196 * _tmp94;
  const Scalar _tmp200 = _tmp138 * _tmp6;
  const Scalar _tmp201 = _tmp140 * _tmp6;
  const Scalar _tmp202 = -_tmp143 * _tmp201 - _tmp168 * _tmp5 - _tmp176 + _tmp177 + _tmp188 -
                         _tmp189 + _tmp200 * _tmp73 + _tmp21;
  const Scalar _tmp203 = _tmp136 + _tmp142 * _tmp201 + _tmp148 - _tmp151 - _tmp159 * _tmp5 +
                         _tmp191 - _tmp200 * _tmp79;
  const Scalar _tmp204 = -_tmp144 * _tmp172 + _tmp162 + _tmp18 * _tmp201 + _tmp193 - _tmp194 +
                         _tmp195 - _tmp200 * _tmp95;
  const Scalar _tmp205 = -_tmp142 * _tmp144 * _tmp5 - _tmp154 * _tmp201 + _tmp16 + _tmp173 +
                         _tmp185 + _tmp200 * _tmp90;
  const Scalar _tmp206 = _tmp102 * _tmp203 - _tmp202 * _tmp94 - _tmp204 * _tmp86 + _tmp205 * _tmp78;
  const Scalar _tmp207 =
      -_tmp102 * _tmp205 + _tmp202 * _tmp86 + _tmp203 * _tmp78 - _tmp204 * _tmp94;
  const Scalar _tmp208 =
      -_tmp102 * _tmp204 + _tmp202 * _tmp78 - _tmp203 * _tmp86 + _tmp205 * _tmp94;
  const Scalar _tmp209 = _tmp44 * dt;
  const Scalar _tmp210 = _tmp209 * _tmp58;
  const Scalar _tmp211 = _tmp66 * dt;
  const Scalar _tmp212 = _tmp211 * _tmp58;
  const Scalar _tmp213 = _tmp70 * dt;
  const Scalar _tmp214 = _tmp213 * _tmp58;
  const Scalar _tmp215 = _tmp55 * dt;
  const Scalar _tmp216 = _tmp215 * _tmp58;
  const Scalar _tmp217 = _tmp61 * dt;
  const Scalar _tmp218 = _tmp217 * _tmp58;
  const Scalar _tmp219 = _tmp71 * dt;
  const Scalar _tmp220 = _tmp219 * _tmp58;
  const Scalar _tmp221 = _tmp49 * dt;
  const Scalar _tmp222 = _tmp221 * _tmp58;
  const Scalar _tmp223 = _tmp65 * dt;
  const Scalar _tmp224 = _tmp223 * _tmp58;
  const Scalar _tmp225 = _tmp68 * dt;
  const Scalar _tmp226 = _tmp225 * _tmp58;

  // Output terms (6)
  if (i_R_k != nullptr) {
    Eigen::Matrix<Scalar, 4, 1>& _i_R_k = (*i_R_k);

    _i_R_k(0, 0) = _tmp23;
    _i_R_k(1, 0) = _tmp29;
    _i_R_k(2, 0) = _tmp34;
    _i_R_k(3, 0) = _tmp39;
  }

  if (i_p_k != nullptr) {
    Eigen::Matrix<Scalar, 3, 1>& _i_p_k = (*i_p_k);

    _i_p_k(0, 0) = _tmp57 * _tmp58 + dt * i_v_j(0, 0) + i_p_j(0, 0);
    _i_p_k(1, 0) = _tmp58 * _tmp67 + dt * i_v_j(1, 0) + i_p_j(1, 0);
    _i_p_k(2, 0) = _tmp58 * _tmp72 + dt * i_v_j(2, 0) + i_p_j(2, 0);
  }

  if (i_v_k != nullptr) {
    Eigen::Matrix<Scalar, 3, 1>& _i_v_k = (*i_v_k);

    _i_v_k(0, 0) = _tmp57 + i_v_j(0, 0);
    _i_v_k(1, 0) = _tmp67 + i_v_j(1, 0);
    _i_v_k(2, 0) = _tmp72 + i_v_j(2, 0);
  }

  if (k_D_j != nullptr) {
    Eigen::Matrix<Scalar, 9, 9>& _k_D_j = (*k_D_j);

    _k_D_j.setZero();

    _k_D_j(0, 0) = _tmp101 * _tmp102 + _tmp77 * _tmp78 - _tmp85 * _tmp86 - _tmp93 * _tmp94;
    _k_D_j(1, 0) = _tmp101 * _tmp78 - _tmp102 * _tmp77 - _tmp85 * _tmp94 + _tmp86 * _tmp93;
    _k_D_j(2, 0) = -_tmp101 * _tmp86 - _tmp102 * _tmp85 + _tmp77 * _tmp94 + _tmp78 * _tmp93;
    _k_D_j(3, 0) = _tmp104 * _tmp58;
    _k_D_j(4, 0) = _tmp108 * _tmp58;
    _k_D_j(5, 0) = _tmp113 * _tmp58;
    _k_D_j(6, 0) = _tmp104;
    _k_D_j(7, 0) = _tmp108;
    _k_D_j(8, 0) = _tmp113;
    _k_D_j(0, 1) = _tmp102 * _tmp121 + _tmp115 * _tmp78 - _tmp117 * _tmp86 - _tmp119 * _tmp94;
    _k_D_j(1, 1) = -_tmp102 * _tmp115 - _tmp117 * _tmp94 + _tmp119 * _tmp86 + _tmp121 * _tmp78;
    _k_D_j(2, 1) = -_tmp102 * _tmp117 + _tmp115 * _tmp94 + _tmp119 * _tmp78 - _tmp121 * _tmp86;
    _k_D_j(3, 1) = _tmp125 * _tmp58;
    _k_D_j(4, 1) = _tmp126 * _tmp58;
    _k_D_j(5, 1) = _tmp128 * _tmp58;
    _k_D_j(6, 1) = _tmp125;
    _k_D_j(7, 1) = _tmp126;
    _k_D_j(8, 1) = _tmp128;
    _k_D_j(0, 2) = _tmp102 * _tmp130 + _tmp129 * _tmp78 - _tmp131 * _tmp94 - _tmp132 * _tmp86;
    _k_D_j(1, 2) = -_tmp102 * _tmp129 + _tmp130 * _tmp78 + _tmp131 * _tmp86 - _tmp132 * _tmp94;
    _k_D_j(2, 2) = -_tmp102 * _tmp132 + _tmp129 * _tmp94 - _tmp130 * _tmp86 + _tmp131 * _tmp78;
    _k_D_j(3, 2) = _tmp133 * _tmp58;
    _k_D_j(4, 2) = _tmp134 * _tmp58;
    _k_D_j(5, 2) = _tmp135 * _tmp58;
    _k_D_j(6, 2) = _tmp133;
    _k_D_j(7, 2) = _tmp134;
    _k_D_j(8, 2) = _tmp135;
    _k_D_j(3, 3) = 1;
    _k_D_j(4, 4) = 1;
    _k_D_j(5, 5) = 1;
    _k_D_j(3, 6) = dt;
    _k_D_j(6, 6) = 1;
    _k_D_j(4, 7) = dt;
    _k_D_j(7, 7) = 1;
    _k_D_j(5, 8) = dt;
    _k_D_j(8, 8) = 1;
  }

  if (k_D_measurements != nullptr) {
    Eigen::Matrix<Scalar, 9, 6>& _k_D_measurements = (*k_D_measurements);

    _k_D_measurements(0, 0) = _tmp180;
    _k_D_measurements(1, 0) = _tmp181;
    _k_D_measurements(2, 0) = _tmp182;
    _k_D_measurements(3, 0) = 0;
    _k_D_measurements(4, 0) = 0;
    _k_D_measurements(5, 0) = 0;
    _k_D_measurements(6, 0) = 0;
    _k_D_measurements(7, 0) = 0;
    _k_D_measurements(8, 0) = 0;
    _k_D_measurements(0, 1) = _tmp197;
    _k_D_measurements(1, 1) = _tmp198;
    _k_D_measurements(2, 1) = _tmp199;
    _k_D_measurements(3, 1) = 0;
    _k_D_measurements(4, 1) = 0;
    _k_D_measurements(5, 1) = 0;
    _k_D_measurements(6, 1) = 0;
    _k_D_measurements(7, 1) = 0;
    _k_D_measurements(8, 1) = 0;
    _k_D_measurements(0, 2) = _tmp206;
    _k_D_measurements(1, 2) = _tmp207;
    _k_D_measurements(2, 2) = _tmp208;
    _k_D_measurements(3, 2) = 0;
    _k_D_measurements(4, 2) = 0;
    _k_D_measurements(5, 2) = 0;
    _k_D_measurements(6, 2) = 0;
    _k_D_measurements(7, 2) = 0;
    _k_D_measurements(8, 2) = 0;
    _k_D_measurements(0, 3) = 0;
    _k_D_measurements(1, 3) = 0;
    _k_D_measurements(2, 3) = 0;
    _k_D_measurements(3, 3) = _tmp210;
    _k_D_measurements(4, 3) = _tmp212;
    _k_D_measurements(5, 3) = _tmp214;
    _k_D_measurements(6, 3) = _tmp209;
    _k_D_measurements(7, 3) = _tmp211;
    _k_D_measurements(8, 3) = _tmp213;
    _k_D_measurements(0, 4) = 0;
    _k_D_measurements(1, 4) = 0;
    _k_D_measurements(2, 4) = 0;
    _k_D_measurements(3, 4) = _tmp216;
    _k_D_measurements(4, 4) = _tmp218;
    _k_D_measurements(5, 4) = _tmp220;
    _k_D_measurements(6, 4) = _tmp215;
    _k_D_measurements(7, 4) = _tmp217;
    _k_D_measurements(8, 4) = _tmp219;
    _k_D_measurements(0, 5) = 0;
    _k_D_measurements(1, 5) = 0;
    _k_D_measurements(2, 5) = 0;
    _k_D_measurements(3, 5) = _tmp222;
    _k_D_measurements(4, 5) = _tmp224;
    _k_D_measurements(5, 5) = _tmp226;
    _k_D_measurements(6, 5) = _tmp221;
    _k_D_measurements(7, 5) = _tmp223;
    _k_D_measurements(8, 5) = _tmp225;
  }

  if (k_D_bias != nullptr) {
    Eigen::Matrix<Scalar, 9, 6>& _k_D_bias = (*k_D_bias);

    _k_D_bias(0, 0) = -_tmp180;
    _k_D_bias(1, 0) = -_tmp181;
    _k_D_bias(2, 0) = -_tmp182;
    _k_D_bias(3, 0) = 0;
    _k_D_bias(4, 0) = 0;
    _k_D_bias(5, 0) = 0;
    _k_D_bias(6, 0) = 0;
    _k_D_bias(7, 0) = 0;
    _k_D_bias(8, 0) = 0;
    _k_D_bias(0, 1) = -_tmp197;
    _k_D_bias(1, 1) = -_tmp198;
    _k_D_bias(2, 1) = -_tmp199;
    _k_D_bias(3, 1) = 0;
    _k_D_bias(4, 1) = 0;
    _k_D_bias(5, 1) = 0;
    _k_D_bias(6, 1) = 0;
    _k_D_bias(7, 1) = 0;
    _k_D_bias(8, 1) = 0;
    _k_D_bias(0, 2) = -_tmp206;
    _k_D_bias(1, 2) = -_tmp207;
    _k_D_bias(2, 2) = -_tmp208;
    _k_D_bias(3, 2) = 0;
    _k_D_bias(4, 2) = 0;
    _k_D_bias(5, 2) = 0;
    _k_D_bias(6, 2) = 0;
    _k_D_bias(7, 2) = 0;
    _k_D_bias(8, 2) = 0;
    _k_D_bias(0, 3) = 0;
    _k_D_bias(1, 3) = 0;
    _k_D_bias(2, 3) = 0;
    _k_D_bias(3, 3) = -_tmp210;
    _k_D_bias(4, 3) = -_tmp212;
    _k_D_bias(5, 3) = -_tmp214;
    _k_D_bias(6, 3) = -_tmp209;
    _k_D_bias(7, 3) = -_tmp211;
    _k_D_bias(8, 3) = -_tmp213;
    _k_D_bias(0, 4) = 0;
    _k_D_bias(1, 4) = 0;
    _k_D_bias(2, 4) = 0;
    _k_D_bias(3, 4) = -_tmp216;
    _k_D_bias(4, 4) = -_tmp218;
    _k_D_bias(5, 4) = -_tmp220;
    _k_D_bias(6, 4) = -_tmp215;
    _k_D_bias(7, 4) = -_tmp217;
    _k_D_bias(8, 4) = -_tmp219;
    _k_D_bias(0, 5) = 0;
    _k_D_bias(1, 5) = 0;
    _k_D_bias(2, 5) = 0;
    _k_D_bias(3, 5) = -_tmp222;
    _k_D_bias(4, 5) = -_tmp224;
    _k_D_bias(5, 5) = -_tmp226;
    _k_D_bias(6, 5) = -_tmp221;
    _k_D_bias(7, 5) = -_tmp223;
    _k_D_bias(8, 5) = -_tmp225;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
