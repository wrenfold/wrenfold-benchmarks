/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#include <lcm/lcm_coretypes.h>

#ifndef __sym_res_t_hpp__
#define __sym_res_t_hpp__

#include <ostream>
#include "lcmtypes/eigen_lcm/Vector3d.hpp"
#include "lcmtypes/eigen_lcm/Vector4d.hpp"
#include "lcmtypes/eigen_lcm/VectorXd.hpp"

namespace sym
{

class res_t
{
    public:
        ::eigen_lcm::Vector4d i_R_k;

        ::eigen_lcm::Vector3d i_p_k;

        ::eigen_lcm::Vector3d i_v_k;

        ::eigen_lcm::VectorXd k_D_j;

        ::eigen_lcm::VectorXd k_D_measurements;

        ::eigen_lcm::VectorXd k_D_bias;

    public:
        res_t() = default;

        /**
         * Member constructor
         */
        inline res_t(
            const ::eigen_lcm::Vector4d& i_R_k_arg,
            const ::eigen_lcm::Vector3d& i_p_k_arg,
            const ::eigen_lcm::Vector3d& i_v_k_arg,
            const ::eigen_lcm::VectorXd& k_D_j_arg,
            const ::eigen_lcm::VectorXd& k_D_measurements_arg,
            const ::eigen_lcm::VectorXd& k_D_bias_arg
        );

        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline __lcm_buffer_size encode(void *buf, __lcm_buffer_size offset, __lcm_buffer_size maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline __lcm_buffer_size getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to read while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline __lcm_buffer_size decode(const void *buf, __lcm_buffer_size offset, __lcm_buffer_size maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        using type_name_array_t = const char[6];

        inline static constexpr type_name_array_t* getTypeNameArrayPtr();

        /**
         * Returns "res_t"
         */
        inline static constexpr const char* getTypeName();

        /**
         * Returns "sym"
         */
        inline static constexpr const char * getPackageName();

        // LCM support functions. Users should not call these
        inline __lcm_buffer_size _encodeNoHash(void *buf, __lcm_buffer_size offset, __lcm_buffer_size maxlen) const;
        inline __lcm_buffer_size _getEncodedSizeNoHash() const;
        inline __lcm_buffer_size _decodeNoHash(const void *buf, __lcm_buffer_size offset, __lcm_buffer_size maxlen);
#if !defined(SKYDIO_DISABLE_LCM_NO_INLINE)
        __attribute__((noinline))
#endif
        static uint64_t _computeHash(const __lcm_hash_ptr *p)
        {
            const __lcm_hash_ptr *fp;
            for(fp = p; fp != NULL; fp = fp->parent)
                if(fp->v == res_t::getHash)
                    return 0;
            const __lcm_hash_ptr cp = { p, res_t::getHash };

            uint64_t hash = 0x9217d8818a28bd78LL +
                ::eigen_lcm::Vector4d::_computeHash(&cp) +
         ::eigen_lcm::Vector3d::_computeHash(&cp) +
         ::eigen_lcm::Vector3d::_computeHash(&cp) +
         ::eigen_lcm::VectorXd::_computeHash(&cp) +
         ::eigen_lcm::VectorXd::_computeHash(&cp) +
         ::eigen_lcm::VectorXd::_computeHash(&cp);

            return (hash<<1) + ((hash>>63)&1);
        }

        // Comparison operators.
        inline bool operator==(const res_t& other) const;
        inline bool operator!=(const res_t& other) const;

        // Ability to print to standard streams as well as the fmt library.
        friend std::ostream& operator<<(std::ostream& stream, const res_t& obj) {
#if defined(SKYMARSHAL_PRINTING_ENABLED)
            stream << "res_t(";
            stream << "i_R_k=" << obj.i_R_k << ", ";
            stream << "i_p_k=" << obj.i_p_k << ", ";
            stream << "i_v_k=" << obj.i_v_k << ", ";
            stream << "k_D_j=" << obj.k_D_j << ", ";
            stream << "k_D_measurements=" << obj.k_D_measurements << ", ";
            stream << "k_D_bias=" << obj.k_D_bias;
            stream << ")";
#else
            stream << "<FORMATTING DISABLED>";
#endif
            return stream;
        }
};

res_t::res_t(
    const ::eigen_lcm::Vector4d& i_R_k_arg,
    const ::eigen_lcm::Vector3d& i_p_k_arg,
    const ::eigen_lcm::Vector3d& i_v_k_arg,
    const ::eigen_lcm::VectorXd& k_D_j_arg,
    const ::eigen_lcm::VectorXd& k_D_measurements_arg,
    const ::eigen_lcm::VectorXd& k_D_bias_arg
) : i_R_k(i_R_k_arg),
    i_p_k(i_p_k_arg),
    i_v_k(i_v_k_arg),
    k_D_j(k_D_j_arg),
    k_D_measurements(k_D_measurements_arg),
    k_D_bias(k_D_bias_arg) {}

__lcm_buffer_size res_t::encode(void *buf, __lcm_buffer_size offset, __lcm_buffer_size maxlen) const
{
    __lcm_buffer_size pos = 0, tlen;
    int64_t hash = (int64_t)getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

__lcm_buffer_size res_t::decode(const void *buf, __lcm_buffer_size offset, __lcm_buffer_size maxlen)
{
    __lcm_buffer_size pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

__lcm_buffer_size res_t::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t res_t::getHash()
{
    static int64_t hash = _computeHash(NULL);
    return hash;
}

constexpr res_t::type_name_array_t* res_t::getTypeNameArrayPtr() {
    return &"res_t";
}

constexpr const char* res_t::getTypeName()
{
    return *res_t::getTypeNameArrayPtr();
}

constexpr const char * res_t::getPackageName()
{
    return "sym";
}

__lcm_buffer_size res_t::_encodeNoHash(void *buf, __lcm_buffer_size offset, __lcm_buffer_size maxlen) const
{
    __lcm_buffer_size pos = 0, tlen;

    tlen = this->i_R_k._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->i_p_k._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->i_v_k._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->k_D_j._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->k_D_measurements._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->k_D_bias._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

__lcm_buffer_size res_t::_decodeNoHash(const void *buf, __lcm_buffer_size offset, __lcm_buffer_size maxlen)
{
    __lcm_buffer_size pos = 0, tlen;

    tlen = this->i_R_k._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->i_p_k._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->i_v_k._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->k_D_j._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->k_D_measurements._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->k_D_bias._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

__lcm_buffer_size res_t::_getEncodedSizeNoHash() const
{
    __lcm_buffer_size enc_size = 0;
    enc_size += this->i_R_k._getEncodedSizeNoHash();
    enc_size += this->i_p_k._getEncodedSizeNoHash();
    enc_size += this->i_v_k._getEncodedSizeNoHash();
    enc_size += this->k_D_j._getEncodedSizeNoHash();
    enc_size += this->k_D_measurements._getEncodedSizeNoHash();
    enc_size += this->k_D_bias._getEncodedSizeNoHash();
    return enc_size;
}

bool res_t::operator==(const res_t& other) const {
  return (
          (i_R_k==other.i_R_k) && 
          (i_p_k==other.i_p_k) && 
          (i_v_k==other.i_v_k) && 
          (k_D_j==other.k_D_j) && 
          (k_D_measurements==other.k_D_measurements) && 
          (k_D_bias==other.k_D_bias));
}

bool res_t::operator!=(const res_t& other) const {
  return !(*this==other);
}

}

#endif