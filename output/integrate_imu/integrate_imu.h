// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <lcmtypes/sym/res_t.hpp>

#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: integrate_imu
 *
 * Args:
 *     i_R_j: Rot3
 *     i_p_j: Matrix31
 *     i_v_j: Matrix31
 *     gyro_bias: Matrix31
 *     accelerometer_bias: Matrix31
 *     angular_velocity: Matrix31
 *     linear_acceleration: Matrix31
 *     dt: Scalar
 *
 * Outputs:
 *     res: Values
 */
template <typename Scalar>
sym::res_t IntegrateImu(const sym::Rot3<Scalar>& i_R_j, const Eigen::Matrix<Scalar, 3, 1>& i_p_j,
                        const Eigen::Matrix<Scalar, 3, 1>& i_v_j,
                        const Eigen::Matrix<Scalar, 3, 1>& gyro_bias,
                        const Eigen::Matrix<Scalar, 3, 1>& accelerometer_bias,
                        const Eigen::Matrix<Scalar, 3, 1>& angular_velocity,
                        const Eigen::Matrix<Scalar, 3, 1>& linear_acceleration, const Scalar dt) {
  // Total ops: 718

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _i_R_j = i_R_j.Data();

  // Intermediate terms (244)
  const Scalar _tmp0 = std::pow(dt, Scalar(2));
  const Scalar _tmp1 = angular_velocity(0, 0) - gyro_bias(0, 0);
  const Scalar _tmp2 = std::pow(_tmp1, Scalar(2));
  const Scalar _tmp3 = angular_velocity(1, 0) - gyro_bias(1, 0);
  const Scalar _tmp4 = std::pow(_tmp3, Scalar(2));
  const Scalar _tmp5 = angular_velocity(2, 0) - gyro_bias(2, 0);
  const Scalar _tmp6 = std::pow(_tmp5, Scalar(2));
  const Scalar _tmp7 =
      _tmp0 * _tmp2 + _tmp0 * _tmp4 + _tmp0 * _tmp6 + Scalar(1.0000000000000001e-32);
  const Scalar _tmp8 = std::sqrt(_tmp7);
  const Scalar _tmp9 = (Scalar(1) / Scalar(2)) * _tmp8;
  const Scalar _tmp10 = std::cos(_tmp9);
  const Scalar _tmp11 = _i_R_j[0] * _tmp10;
  const Scalar _tmp12 = std::sin(_tmp9);
  const Scalar _tmp13 = _tmp12 / _tmp8;
  const Scalar _tmp14 = _tmp13 * dt;
  const Scalar _tmp15 = _i_R_j[2] * _tmp14;
  const Scalar _tmp16 = _i_R_j[1] * dt;
  const Scalar _tmp17 = _tmp13 * _tmp16;
  const Scalar _tmp18 = _i_R_j[3] * _tmp14;
  const Scalar _tmp19 = _tmp1 * _tmp18 + _tmp11 - _tmp15 * _tmp3 + _tmp17 * _tmp5;
  const Scalar _tmp20 = _i_R_j[1] * _tmp10;
  const Scalar _tmp21 = _i_R_j[0] * _tmp14;
  const Scalar _tmp22 = _tmp1 * _tmp15 + _tmp18 * _tmp3 + _tmp20 - _tmp21 * _tmp5;
  const Scalar _tmp23 = _i_R_j[2] * _tmp10;
  const Scalar _tmp24 = -_tmp1 * _tmp17 + _tmp18 * _tmp5 + _tmp21 * _tmp3 + _tmp23;
  const Scalar _tmp25 = _i_R_j[3] * _tmp10;
  const Scalar _tmp26 = -_tmp1 * _tmp21 - _tmp15 * _tmp5 - _tmp17 * _tmp3 + _tmp25;
  const Scalar _tmp27 = -2 * std::pow(_i_R_j[1], Scalar(2));
  const Scalar _tmp28 = -2 * std::pow(_i_R_j[2], Scalar(2));
  const Scalar _tmp29 = _tmp27 + _tmp28 + 1;
  const Scalar _tmp30 = -accelerometer_bias(0, 0) + linear_acceleration(0, 0);
  const Scalar _tmp31 = 2 * _i_R_j[2];
  const Scalar _tmp32 = _i_R_j[0] * _tmp31;
  const Scalar _tmp33 = 2 * _i_R_j[1];
  const Scalar _tmp34 = _i_R_j[3] * _tmp33;
  const Scalar _tmp35 = _tmp32 + _tmp34;
  const Scalar _tmp36 = -accelerometer_bias(2, 0) + linear_acceleration(2, 0);
  const Scalar _tmp37 = _i_R_j[0] * _tmp33;
  const Scalar _tmp38 = _i_R_j[3] * _tmp31;
  const Scalar _tmp39 = _tmp37 - _tmp38;
  const Scalar _tmp40 = -accelerometer_bias(1, 0) + linear_acceleration(1, 0);
  const Scalar _tmp41 = dt * (_tmp29 * _tmp30 + _tmp35 * _tmp36 + _tmp39 * _tmp40);
  const Scalar _tmp42 = std::fabs(dt);
  const Scalar _tmp43 = (Scalar(1) / Scalar(2)) * _tmp42;
  const Scalar _tmp44 = 1 - 2 * std::pow(_i_R_j[0], Scalar(2));
  const Scalar _tmp45 = _tmp28 + _tmp44;
  const Scalar _tmp46 = _i_R_j[2] * _tmp33;
  const Scalar _tmp47 = 2 * _i_R_j[0];
  const Scalar _tmp48 = _i_R_j[3] * _tmp47;
  const Scalar _tmp49 = _tmp46 - _tmp48;
  const Scalar _tmp50 = _tmp37 + _tmp38;
  const Scalar _tmp51 = dt * (_tmp30 * _tmp50 + _tmp36 * _tmp49 + _tmp40 * _tmp45);
  const Scalar _tmp52 = _tmp27 + _tmp44;
  const Scalar _tmp53 = _tmp46 + _tmp48;
  const Scalar _tmp54 = _tmp32 - _tmp34;
  const Scalar _tmp55 = dt * (_tmp30 * _tmp54 + _tmp36 * _tmp52 + _tmp40 * _tmp53);
  const Scalar _tmp56 = (Scalar(1) / Scalar(2)) * dt;
  const Scalar _tmp57 = _i_R_j[1] * _tmp56;
  const Scalar _tmp58 = _tmp13 * _tmp57;
  const Scalar _tmp59 = _tmp5 * _tmp58;
  const Scalar _tmp60 = _i_R_j[3] * _tmp56;
  const Scalar _tmp61 = _tmp1 * _tmp13;
  const Scalar _tmp62 = _tmp60 * _tmp61;
  const Scalar _tmp63 = -_tmp62;
  const Scalar _tmp64 = (Scalar(1) / Scalar(2)) * _tmp11;
  const Scalar _tmp65 = _i_R_j[2] * _tmp56;
  const Scalar _tmp66 = _tmp13 * _tmp65;
  const Scalar _tmp67 = -_tmp3 * _tmp66;
  const Scalar _tmp68 = -_tmp64 + _tmp67;
  const Scalar _tmp69 = _tmp59 + _tmp63 + _tmp68;
  const Scalar _tmp70 = 2 * _tmp19;
  const Scalar _tmp71 = (Scalar(1) / Scalar(2)) * _tmp20;
  const Scalar _tmp72 = -_tmp71;
  const Scalar _tmp73 = _tmp61 * _tmp65;
  const Scalar _tmp74 = -_tmp73;
  const Scalar _tmp75 = _tmp13 * _tmp60;
  const Scalar _tmp76 = _tmp3 * _tmp75;
  const Scalar _tmp77 = _i_R_j[0] * _tmp56;
  const Scalar _tmp78 = _tmp13 * _tmp77;
  const Scalar _tmp79 = -_tmp5 * _tmp78;
  const Scalar _tmp80 = _tmp72 + _tmp74 + _tmp76 + _tmp79;
  const Scalar _tmp81 = 2 * _tmp22;
  const Scalar _tmp82 = _tmp3 * _tmp58;
  const Scalar _tmp83 = _tmp61 * _tmp77;
  const Scalar _tmp84 = (Scalar(1) / Scalar(2)) * _tmp25;
  const Scalar _tmp85 = _tmp5 * _tmp66;
  const Scalar _tmp86 = _tmp84 + _tmp85;
  const Scalar _tmp87 = _tmp82 - _tmp83 + _tmp86;
  const Scalar _tmp88 = 2 * _tmp26;
  const Scalar _tmp89 = (Scalar(1) / Scalar(2)) * _tmp23;
  const Scalar _tmp90 = -_tmp57 * _tmp61;
  const Scalar _tmp91 = _tmp5 * _tmp75;
  const Scalar _tmp92 = -_tmp91;
  const Scalar _tmp93 = _tmp3 * _tmp78;
  const Scalar _tmp94 = -_tmp93;
  const Scalar _tmp95 = _tmp89 + _tmp90 + _tmp92 + _tmp94;
  const Scalar _tmp96 = 2 * _tmp24;
  const Scalar _tmp97 = _tmp40 * _tmp47;
  const Scalar _tmp98 = 2 * _tmp36;
  const Scalar _tmp99 = _i_R_j[3] * _tmp98;
  const Scalar _tmp100 = -4 * _i_R_j[1] * _tmp30 + _tmp97 + _tmp99;
  const Scalar _tmp101 = (Scalar(1) / Scalar(4)) * _tmp42;
  const Scalar _tmp102 = _tmp101 * dt;
  const Scalar _tmp103 = _i_R_j[2] * _tmp102;
  const Scalar _tmp104 = 2 * _i_R_j[3];
  const Scalar _tmp105 = _tmp104 * _tmp40;
  const Scalar _tmp106 = 4 * _i_R_j[2];
  const Scalar _tmp107 = _i_R_j[0] * _tmp98;
  const Scalar _tmp108 = -_tmp105 - _tmp106 * _tmp30 + _tmp107;
  const Scalar _tmp109 = _tmp101 * _tmp16;
  const Scalar _tmp110 = _tmp31 * _tmp40;
  const Scalar _tmp111 = _i_R_j[1] * _tmp98;
  const Scalar _tmp112 = -_tmp110 + _tmp111;
  const Scalar _tmp113 = _i_R_j[0] * _tmp102;
  const Scalar _tmp114 = _tmp33 * _tmp40;
  const Scalar _tmp115 = _i_R_j[2] * _tmp98;
  const Scalar _tmp116 = _tmp114 + _tmp115;
  const Scalar _tmp117 = _i_R_j[3] * _tmp102;
  const Scalar _tmp118 = _tmp104 * _tmp30;
  const Scalar _tmp119 = -_tmp106 * _tmp40 + _tmp111 + _tmp118;
  const Scalar _tmp120 = _tmp30 * _tmp33;
  const Scalar _tmp121 = -4 * _i_R_j[0] * _tmp40 + _tmp120 - _tmp99;
  const Scalar _tmp122 = _tmp30 * _tmp31;
  const Scalar _tmp123 = -_tmp107 + _tmp122;
  const Scalar _tmp124 = _tmp30 * _tmp47;
  const Scalar _tmp125 = _tmp115 + _tmp124;
  const Scalar _tmp126 = -_tmp120 + _tmp97;
  const Scalar _tmp127 = _tmp114 + _tmp124;
  const Scalar _tmp128 = 4 * _tmp36;
  const Scalar _tmp129 = -_i_R_j[1] * _tmp128 + _tmp110 - _tmp118;
  const Scalar _tmp130 = -_i_R_j[0] * _tmp128 + _tmp105 + _tmp122;
  const Scalar _tmp131 = _tmp116 * _tmp56;
  const Scalar _tmp132 = _tmp112 * _tmp56;
  const Scalar _tmp133 = _tmp123 * _tmp56;
  const Scalar _tmp134 = -_tmp76 + _tmp79;
  const Scalar _tmp135 = _tmp134 + _tmp72 + _tmp73;
  const Scalar _tmp136 = -_tmp59;
  const Scalar _tmp137 = _tmp136 + _tmp63 + _tmp64 + _tmp67;
  const Scalar _tmp138 = -_tmp89 + _tmp90;
  const Scalar _tmp139 = _tmp138 + _tmp91 + _tmp94;
  const Scalar _tmp140 = -_tmp82 + _tmp83 + _tmp86;
  const Scalar _tmp141 = _tmp134 + _tmp71 + _tmp74;
  const Scalar _tmp142 = _tmp82 + _tmp83 + _tmp84 - _tmp85;
  const Scalar _tmp143 = _tmp138 + _tmp92 + _tmp93;
  const Scalar _tmp144 = _tmp136 + _tmp62 + _tmp68;
  const Scalar _tmp145 = -_tmp17;
  const Scalar _tmp146 = [&]() {
    const Scalar base = dt;
    return base * base * base;
  }();
  const Scalar _tmp147 = _tmp146 * _tmp2;
  const Scalar _tmp148 = _tmp12 / (_tmp7 * std::sqrt(_tmp7));
  const Scalar _tmp149 = _i_R_j[1] * _tmp148;
  const Scalar _tmp150 = Scalar(1.0) / (_tmp7);
  const Scalar _tmp151 = _tmp147 * _tmp150;
  const Scalar _tmp152 = (Scalar(1) / Scalar(2)) * _tmp0;
  const Scalar _tmp153 = _i_R_j[2] * _tmp152;
  const Scalar _tmp154 = _i_R_j[0] * _tmp148;
  const Scalar _tmp155 = _tmp146 * _tmp154;
  const Scalar _tmp156 = _tmp1 * _tmp155;
  const Scalar _tmp157 = _tmp156 * _tmp3;
  const Scalar _tmp158 = _tmp150 * _tmp64;
  const Scalar _tmp159 = _tmp1 * _tmp146;
  const Scalar _tmp160 = _tmp159 * _tmp3;
  const Scalar _tmp161 = _tmp158 * _tmp160;
  const Scalar _tmp162 = _i_R_j[3] * _tmp148;
  const Scalar _tmp163 = _tmp146 * _tmp162;
  const Scalar _tmp164 = _tmp1 * _tmp163;
  const Scalar _tmp165 = _tmp159 * _tmp5;
  const Scalar _tmp166 = _tmp150 * _tmp84;
  const Scalar _tmp167 = -_tmp164 * _tmp5 + _tmp165 * _tmp166;
  const Scalar _tmp168 = _tmp145 + _tmp147 * _tmp149 - _tmp151 * _tmp71 - _tmp153 * _tmp61 -
                         _tmp157 + _tmp161 + _tmp167;
  const Scalar _tmp169 = -_tmp21;
  const Scalar _tmp170 = _tmp152 * _tmp61;
  const Scalar _tmp171 = _i_R_j[2] * _tmp148;
  const Scalar _tmp172 = _tmp146 * _tmp171;
  const Scalar _tmp173 = _tmp1 * _tmp172;
  const Scalar _tmp174 = _tmp173 * _tmp5;
  const Scalar _tmp175 = _tmp150 * _tmp89;
  const Scalar _tmp176 = _tmp165 * _tmp175;
  const Scalar _tmp177 = _tmp146 * _tmp149;
  const Scalar _tmp178 = _tmp1 * _tmp177;
  const Scalar _tmp179 = _tmp150 * _tmp71;
  const Scalar _tmp180 = -_tmp160 * _tmp179 + _tmp178 * _tmp3;
  const Scalar _tmp181 = -_i_R_j[3] * _tmp170 + _tmp147 * _tmp154 - _tmp151 * _tmp64 + _tmp169 +
                         _tmp174 - _tmp176 + _tmp180;
  const Scalar _tmp182 = _tmp178 * _tmp5;
  const Scalar _tmp183 = _tmp173 * _tmp3;
  const Scalar _tmp184 = _tmp160 * _tmp175;
  const Scalar _tmp185 = _tmp165 * _tmp179;
  const Scalar _tmp186 = -_i_R_j[0] * _tmp170 - _tmp147 * _tmp162 + _tmp151 * _tmp84 + _tmp18 -
                         _tmp182 + _tmp183 - _tmp184 + _tmp185;
  const Scalar _tmp187 = _i_R_j[1] * _tmp152;
  const Scalar _tmp188 = _tmp160 * _tmp166 - _tmp164 * _tmp3;
  const Scalar _tmp189 = _tmp156 * _tmp5 - _tmp158 * _tmp165;
  const Scalar _tmp190 =
      _tmp147 * _tmp175 + _tmp15 - _tmp172 * _tmp2 - _tmp187 * _tmp61 + _tmp188 + _tmp189;
  const Scalar _tmp191 = -_tmp168 * _tmp81 - _tmp181 * _tmp70 + _tmp186 * _tmp88 + _tmp190 * _tmp96;
  const Scalar _tmp192 = _tmp168 * _tmp70 - _tmp181 * _tmp81 - _tmp186 * _tmp96 + _tmp190 * _tmp88;
  const Scalar _tmp193 = _tmp168 * _tmp88 - _tmp181 * _tmp96 + _tmp186 * _tmp81 - _tmp190 * _tmp70;
  const Scalar _tmp194 = _tmp146 * _tmp4;
  const Scalar _tmp195 = _tmp150 * _tmp194;
  const Scalar _tmp196 = _tmp13 * _tmp152;
  const Scalar _tmp197 = _i_R_j[3] * _tmp196;
  const Scalar _tmp198 = _tmp3 * _tmp5;
  const Scalar _tmp199 = _tmp146 * _tmp198;
  const Scalar _tmp200 = _tmp172 * _tmp198 - _tmp175 * _tmp199;
  const Scalar _tmp201 = _tmp145 + _tmp149 * _tmp194 + _tmp157 - _tmp161 - _tmp195 * _tmp71 -
                         _tmp197 * _tmp3 + _tmp200;
  const Scalar _tmp202 = _tmp13 * _tmp153;
  const Scalar _tmp203 = -_tmp163 * _tmp198 + _tmp166 * _tmp199;
  const Scalar _tmp204 =
      -_tmp154 * _tmp194 + _tmp180 + _tmp195 * _tmp64 - _tmp202 * _tmp3 + _tmp203 + _tmp21;
  const Scalar _tmp205 = _tmp13 * _tmp187;
  const Scalar _tmp206 = _tmp155 * _tmp198;
  const Scalar _tmp207 = _tmp158 * _tmp199;
  const Scalar _tmp208 = -_tmp162 * _tmp194 + _tmp18 - _tmp183 + _tmp184 + _tmp195 * _tmp84 -
                         _tmp205 * _tmp3 + _tmp206 - _tmp207;
  const Scalar _tmp209 = _i_R_j[0] * _tmp196;
  const Scalar _tmp210 = -_tmp15;
  const Scalar _tmp211 = _tmp177 * _tmp198;
  const Scalar _tmp212 = _tmp179 * _tmp199;
  const Scalar _tmp213 =
      _tmp172 * _tmp4 + _tmp188 - _tmp195 * _tmp89 - _tmp209 * _tmp3 + _tmp210 - _tmp211 + _tmp212;
  const Scalar _tmp214 = -_tmp201 * _tmp70 - _tmp204 * _tmp81 + _tmp208 * _tmp96 + _tmp213 * _tmp88;
  const Scalar _tmp215 = -_tmp201 * _tmp81 + _tmp204 * _tmp70 + _tmp208 * _tmp88 - _tmp213 * _tmp96;
  const Scalar _tmp216 = -_tmp201 * _tmp96 + _tmp204 * _tmp88 - _tmp208 * _tmp70 + _tmp213 * _tmp81;
  const Scalar _tmp217 = _tmp146 * _tmp6;
  const Scalar _tmp218 = _tmp150 * _tmp217;
  const Scalar _tmp219 = _tmp154 * _tmp217 + _tmp169 - _tmp174 + _tmp176 + _tmp203 -
                         _tmp205 * _tmp5 - _tmp218 * _tmp64;
  const Scalar _tmp220 = -_tmp162 * _tmp217 + _tmp18 + _tmp182 - _tmp185 - _tmp202 * _tmp5 -
                         _tmp206 + _tmp207 + _tmp218 * _tmp84;
  const Scalar _tmp221 =
      -_tmp149 * _tmp217 + _tmp167 + _tmp17 + _tmp200 - _tmp209 * _tmp5 + _tmp218 * _tmp71;
  const Scalar _tmp222 = _tmp171 * _tmp217 - _tmp175 * _tmp217 + _tmp189 - _tmp197 * _tmp5 +
                         _tmp210 + _tmp211 - _tmp212;
  const Scalar _tmp223 = _tmp219 * _tmp96 - _tmp220 * _tmp81 + _tmp221 * _tmp88 - _tmp222 * _tmp70;
  const Scalar _tmp224 = _tmp219 * _tmp88 + _tmp220 * _tmp70 - _tmp221 * _tmp96 - _tmp222 * _tmp81;
  const Scalar _tmp225 = -_tmp219 * _tmp70 + _tmp220 * _tmp88 + _tmp221 * _tmp81 - _tmp222 * _tmp96;
  const Scalar _tmp226 = _tmp29 * dt;
  const Scalar _tmp227 = _tmp226 * _tmp43;
  const Scalar _tmp228 = _tmp50 * dt;
  const Scalar _tmp229 = _tmp228 * _tmp43;
  const Scalar _tmp230 = _tmp54 * dt;
  const Scalar _tmp231 = _tmp230 * _tmp43;
  const Scalar _tmp232 = _tmp39 * dt;
  const Scalar _tmp233 = _tmp232 * _tmp43;
  const Scalar _tmp234 = _tmp45 * dt;
  const Scalar _tmp235 = _tmp234 * _tmp43;
  const Scalar _tmp236 = _tmp53 * dt;
  const Scalar _tmp237 = _tmp236 * _tmp43;
  const Scalar _tmp238 = _tmp35 * dt;
  const Scalar _tmp239 = _tmp238 * _tmp43;
  const Scalar _tmp240 = _tmp49 * dt;
  const Scalar _tmp241 = _tmp240 * _tmp43;
  const Scalar _tmp242 = _tmp52 * dt;
  const Scalar _tmp243 = _tmp242 * _tmp43;

  // Output terms (1)
  sym::res_t _res;

  _res.i_R_k.data()[0] = _tmp19;
  _res.i_R_k.data()[1] = _tmp22;
  _res.i_R_k.data()[2] = _tmp24;
  _res.i_R_k.data()[3] = _tmp26;
  _res.i_p_k.data()[0] = _tmp41 * _tmp43 + dt * i_v_j(0, 0) + i_p_j(0, 0);
  _res.i_p_k.data()[1] = _tmp43 * _tmp51 + dt * i_v_j(1, 0) + i_p_j(1, 0);
  _res.i_p_k.data()[2] = _tmp43 * _tmp55 + dt * i_v_j(2, 0) + i_p_j(2, 0);
  _res.i_v_k.data()[0] = _tmp41 + i_v_j(0, 0);
  _res.i_v_k.data()[1] = _tmp51 + i_v_j(1, 0);
  _res.i_v_k.data()[2] = _tmp55 + i_v_j(2, 0);
  _res.k_D_j.data()[0] = -_tmp69 * _tmp70 - _tmp80 * _tmp81 + _tmp87 * _tmp88 + _tmp95 * _tmp96;
  _res.k_D_j.data()[1] = -_tmp69 * _tmp81 + _tmp70 * _tmp80 - _tmp87 * _tmp96 + _tmp88 * _tmp95;
  _res.k_D_j.data()[2] = -_tmp69 * _tmp96 - _tmp70 * _tmp95 + _tmp80 * _tmp88 + _tmp81 * _tmp87;
  _res.k_D_j.data()[3] =
      _tmp100 * _tmp103 - _tmp108 * _tmp109 - _tmp112 * _tmp113 + _tmp116 * _tmp117;
  _res.k_D_j.data()[4] =
      _tmp103 * _tmp125 - _tmp109 * _tmp119 - _tmp113 * _tmp123 + _tmp117 * _tmp121;
  _res.k_D_j.data()[5] =
      _tmp103 * _tmp129 - _tmp109 * _tmp127 - _tmp113 * _tmp126 + _tmp117 * _tmp130;
  _res.k_D_j.data()[6] =
      -_i_R_j[0] * _tmp132 + _i_R_j[3] * _tmp131 + _tmp100 * _tmp65 - _tmp108 * _tmp57;
  _res.k_D_j.data()[7] =
      -_i_R_j[0] * _tmp133 - _tmp119 * _tmp57 + _tmp121 * _tmp60 + _tmp125 * _tmp65;
  _res.k_D_j.data()[8] = -_tmp126 * _tmp77 - _tmp127 * _tmp57 + _tmp129 * _tmp65 + _tmp130 * _tmp60;
  _res.k_D_j.data()[9] = -_tmp135 * _tmp70 - _tmp137 * _tmp81 + _tmp139 * _tmp88 + _tmp140 * _tmp96;
  _res.k_D_j.data()[10] =
      -_tmp135 * _tmp81 + _tmp137 * _tmp70 - _tmp139 * _tmp96 + _tmp140 * _tmp88;
  _res.k_D_j.data()[11] =
      -_tmp135 * _tmp96 + _tmp137 * _tmp88 + _tmp139 * _tmp81 - _tmp140 * _tmp70;
  _res.k_D_j.data()[12] =
      _tmp100 * _tmp117 - _tmp103 * _tmp116 + _tmp108 * _tmp113 - _tmp109 * _tmp112;
  _res.k_D_j.data()[13] =
      -_tmp103 * _tmp121 - _tmp109 * _tmp123 + _tmp113 * _tmp119 + _tmp117 * _tmp125;
  _res.k_D_j.data()[14] =
      -_tmp103 * _tmp130 - _tmp109 * _tmp126 + _tmp113 * _tmp127 + _tmp117 * _tmp129;
  _res.k_D_j.data()[15] =
      -_i_R_j[1] * _tmp132 - _i_R_j[2] * _tmp131 + _tmp100 * _tmp60 + _tmp108 * _tmp77;
  _res.k_D_j.data()[16] =
      -_i_R_j[1] * _tmp133 + _tmp119 * _tmp77 - _tmp121 * _tmp65 + _tmp125 * _tmp60;
  _res.k_D_j.data()[17] =
      -_tmp126 * _tmp57 + _tmp127 * _tmp77 + _tmp129 * _tmp60 - _tmp130 * _tmp65;
  _res.k_D_j.data()[18] = _tmp141 * _tmp88 - _tmp142 * _tmp81 - _tmp143 * _tmp70 + _tmp144 * _tmp96;
  _res.k_D_j.data()[19] =
      -_tmp141 * _tmp96 + _tmp142 * _tmp70 - _tmp143 * _tmp81 + _tmp144 * _tmp88;
  _res.k_D_j.data()[20] = _tmp141 * _tmp81 + _tmp142 * _tmp88 - _tmp143 * _tmp96 - _tmp144 * _tmp70;
  _res.k_D_j.data()[21] =
      -_tmp100 * _tmp113 - _tmp103 * _tmp112 + _tmp108 * _tmp117 + _tmp109 * _tmp116;
  _res.k_D_j.data()[22] =
      -_tmp103 * _tmp123 + _tmp109 * _tmp121 - _tmp113 * _tmp125 + _tmp117 * _tmp119;
  _res.k_D_j.data()[23] =
      -_tmp103 * _tmp126 + _tmp109 * _tmp130 - _tmp113 * _tmp129 + _tmp117 * _tmp127;
  _res.k_D_j.data()[24] =
      _i_R_j[1] * _tmp131 - _i_R_j[2] * _tmp132 - _tmp100 * _tmp77 + _tmp108 * _tmp60;
  _res.k_D_j.data()[25] =
      -_i_R_j[2] * _tmp133 + _tmp119 * _tmp60 + _tmp121 * _tmp57 - _tmp125 * _tmp77;
  _res.k_D_j.data()[26] =
      -_tmp126 * _tmp65 + _tmp127 * _tmp60 - _tmp129 * _tmp77 + _tmp130 * _tmp57;
  _res.k_D_j.data()[27] = 0;
  _res.k_D_j.data()[28] = 0;
  _res.k_D_j.data()[29] = 0;
  _res.k_D_j.data()[30] = 1;
  _res.k_D_j.data()[31] = 0;
  _res.k_D_j.data()[32] = 0;
  _res.k_D_j.data()[33] = 0;
  _res.k_D_j.data()[34] = 0;
  _res.k_D_j.data()[35] = 0;
  _res.k_D_j.data()[36] = 0;
  _res.k_D_j.data()[37] = 0;
  _res.k_D_j.data()[38] = 0;
  _res.k_D_j.data()[39] = 0;
  _res.k_D_j.data()[40] = 1;
  _res.k_D_j.data()[41] = 0;
  _res.k_D_j.data()[42] = 0;
  _res.k_D_j.data()[43] = 0;
  _res.k_D_j.data()[44] = 0;
  _res.k_D_j.data()[45] = 0;
  _res.k_D_j.data()[46] = 0;
  _res.k_D_j.data()[47] = 0;
  _res.k_D_j.data()[48] = 0;
  _res.k_D_j.data()[49] = 0;
  _res.k_D_j.data()[50] = 1;
  _res.k_D_j.data()[51] = 0;
  _res.k_D_j.data()[52] = 0;
  _res.k_D_j.data()[53] = 0;
  _res.k_D_j.data()[54] = 0;
  _res.k_D_j.data()[55] = 0;
  _res.k_D_j.data()[56] = 0;
  _res.k_D_j.data()[57] = dt;
  _res.k_D_j.data()[58] = 0;
  _res.k_D_j.data()[59] = 0;
  _res.k_D_j.data()[60] = 1;
  _res.k_D_j.data()[61] = 0;
  _res.k_D_j.data()[62] = 0;
  _res.k_D_j.data()[63] = 0;
  _res.k_D_j.data()[64] = 0;
  _res.k_D_j.data()[65] = 0;
  _res.k_D_j.data()[66] = 0;
  _res.k_D_j.data()[67] = dt;
  _res.k_D_j.data()[68] = 0;
  _res.k_D_j.data()[69] = 0;
  _res.k_D_j.data()[70] = 1;
  _res.k_D_j.data()[71] = 0;
  _res.k_D_j.data()[72] = 0;
  _res.k_D_j.data()[73] = 0;
  _res.k_D_j.data()[74] = 0;
  _res.k_D_j.data()[75] = 0;
  _res.k_D_j.data()[76] = 0;
  _res.k_D_j.data()[77] = dt;
  _res.k_D_j.data()[78] = 0;
  _res.k_D_j.data()[79] = 0;
  _res.k_D_j.data()[80] = 1;
  _res.k_D_measurements.data()[0] = _tmp191;
  _res.k_D_measurements.data()[1] = _tmp192;
  _res.k_D_measurements.data()[2] = _tmp193;
  _res.k_D_measurements.data()[3] = 0;
  _res.k_D_measurements.data()[4] = 0;
  _res.k_D_measurements.data()[5] = 0;
  _res.k_D_measurements.data()[6] = 0;
  _res.k_D_measurements.data()[7] = 0;
  _res.k_D_measurements.data()[8] = 0;
  _res.k_D_measurements.data()[9] = _tmp214;
  _res.k_D_measurements.data()[10] = _tmp215;
  _res.k_D_measurements.data()[11] = _tmp216;
  _res.k_D_measurements.data()[12] = 0;
  _res.k_D_measurements.data()[13] = 0;
  _res.k_D_measurements.data()[14] = 0;
  _res.k_D_measurements.data()[15] = 0;
  _res.k_D_measurements.data()[16] = 0;
  _res.k_D_measurements.data()[17] = 0;
  _res.k_D_measurements.data()[18] = _tmp223;
  _res.k_D_measurements.data()[19] = _tmp224;
  _res.k_D_measurements.data()[20] = _tmp225;
  _res.k_D_measurements.data()[21] = 0;
  _res.k_D_measurements.data()[22] = 0;
  _res.k_D_measurements.data()[23] = 0;
  _res.k_D_measurements.data()[24] = 0;
  _res.k_D_measurements.data()[25] = 0;
  _res.k_D_measurements.data()[26] = 0;
  _res.k_D_measurements.data()[27] = 0;
  _res.k_D_measurements.data()[28] = 0;
  _res.k_D_measurements.data()[29] = 0;
  _res.k_D_measurements.data()[30] = _tmp227;
  _res.k_D_measurements.data()[31] = _tmp229;
  _res.k_D_measurements.data()[32] = _tmp231;
  _res.k_D_measurements.data()[33] = _tmp226;
  _res.k_D_measurements.data()[34] = _tmp228;
  _res.k_D_measurements.data()[35] = _tmp230;
  _res.k_D_measurements.data()[36] = 0;
  _res.k_D_measurements.data()[37] = 0;
  _res.k_D_measurements.data()[38] = 0;
  _res.k_D_measurements.data()[39] = _tmp233;
  _res.k_D_measurements.data()[40] = _tmp235;
  _res.k_D_measurements.data()[41] = _tmp237;
  _res.k_D_measurements.data()[42] = _tmp232;
  _res.k_D_measurements.data()[43] = _tmp234;
  _res.k_D_measurements.data()[44] = _tmp236;
  _res.k_D_measurements.data()[45] = 0;
  _res.k_D_measurements.data()[46] = 0;
  _res.k_D_measurements.data()[47] = 0;
  _res.k_D_measurements.data()[48] = _tmp239;
  _res.k_D_measurements.data()[49] = _tmp241;
  _res.k_D_measurements.data()[50] = _tmp243;
  _res.k_D_measurements.data()[51] = _tmp238;
  _res.k_D_measurements.data()[52] = _tmp240;
  _res.k_D_measurements.data()[53] = _tmp242;
  _res.k_D_bias.data()[0] = -_tmp191;
  _res.k_D_bias.data()[1] = -_tmp192;
  _res.k_D_bias.data()[2] = -_tmp193;
  _res.k_D_bias.data()[3] = 0;
  _res.k_D_bias.data()[4] = 0;
  _res.k_D_bias.data()[5] = 0;
  _res.k_D_bias.data()[6] = 0;
  _res.k_D_bias.data()[7] = 0;
  _res.k_D_bias.data()[8] = 0;
  _res.k_D_bias.data()[9] = -_tmp214;
  _res.k_D_bias.data()[10] = -_tmp215;
  _res.k_D_bias.data()[11] = -_tmp216;
  _res.k_D_bias.data()[12] = 0;
  _res.k_D_bias.data()[13] = 0;
  _res.k_D_bias.data()[14] = 0;
  _res.k_D_bias.data()[15] = 0;
  _res.k_D_bias.data()[16] = 0;
  _res.k_D_bias.data()[17] = 0;
  _res.k_D_bias.data()[18] = -_tmp223;
  _res.k_D_bias.data()[19] = -_tmp224;
  _res.k_D_bias.data()[20] = -_tmp225;
  _res.k_D_bias.data()[21] = 0;
  _res.k_D_bias.data()[22] = 0;
  _res.k_D_bias.data()[23] = 0;
  _res.k_D_bias.data()[24] = 0;
  _res.k_D_bias.data()[25] = 0;
  _res.k_D_bias.data()[26] = 0;
  _res.k_D_bias.data()[27] = 0;
  _res.k_D_bias.data()[28] = 0;
  _res.k_D_bias.data()[29] = 0;
  _res.k_D_bias.data()[30] = -_tmp227;
  _res.k_D_bias.data()[31] = -_tmp229;
  _res.k_D_bias.data()[32] = -_tmp231;
  _res.k_D_bias.data()[33] = -_tmp226;
  _res.k_D_bias.data()[34] = -_tmp228;
  _res.k_D_bias.data()[35] = -_tmp230;
  _res.k_D_bias.data()[36] = 0;
  _res.k_D_bias.data()[37] = 0;
  _res.k_D_bias.data()[38] = 0;
  _res.k_D_bias.data()[39] = -_tmp233;
  _res.k_D_bias.data()[40] = -_tmp235;
  _res.k_D_bias.data()[41] = -_tmp237;
  _res.k_D_bias.data()[42] = -_tmp232;
  _res.k_D_bias.data()[43] = -_tmp234;
  _res.k_D_bias.data()[44] = -_tmp236;
  _res.k_D_bias.data()[45] = 0;
  _res.k_D_bias.data()[46] = 0;
  _res.k_D_bias.data()[47] = 0;
  _res.k_D_bias.data()[48] = -_tmp239;
  _res.k_D_bias.data()[49] = -_tmp241;
  _res.k_D_bias.data()[50] = -_tmp243;
  _res.k_D_bias.data()[51] = -_tmp238;
  _res.k_D_bias.data()[52] = -_tmp240;
  _res.k_D_bias.data()[53] = -_tmp242;

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
